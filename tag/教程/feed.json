{
    "version": "https://jsonfeed.org/version/1",
    "title": "カレーうどん屋 • All posts by \"教程\" tag",
    "description": "カレーうどん屋.",
    "home_page_url": "https://blog.udon.eu.org",
    "items": [
        {
            "id": "https://blog.udon.eu.org/archives/8b68ddd6.html",
            "url": "https://blog.udon.eu.org/archives/8b68ddd6.html",
            "title": "修复 UEFI 引导的 GRUB",
            "date_published": "2023-04-15T16:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"问题与解决方法\"><a href=\"#问题与解决方法\" class=\"headerlink\" title=\"问题与解决方法\"></a>问题与解决方法</h2><h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><p>Manjaro Linux x86_64</p>\n<p>Kernel: 6.2.10-1-MANJARO</p>\n<p>使用 UEFI 引导</p>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>在 GRUB 尝试引导 Linux 内核时，出现如下错误：</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">error:<span class=\"hljs-built_in\"> sparse </span>file<span class=\"hljs-built_in\"> not </span>allowed.<br><br>452: out of range pointer: xxxxxxxxxx<br><br>Aborted. Press any key to exit.<br></code></pre></td></tr></table></figure>\n\n<p>用户将无法进入系统。</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><h4 id=\"进入恢复系统\"><a href=\"#进入恢复系统\" class=\"headerlink\" title=\"进入恢复系统\"></a>进入恢复系统</h4><p>插入 Manjaro LiveCD, 启动 Live 系统。</p>\n<h4 id=\"确定磁盘分区\"><a href=\"#确定磁盘分区\" class=\"headerlink\" title=\"确定磁盘分区\"></a>确定磁盘分区</h4><p>在 Live 系统中，使用 <code>fdisk -l</code> 查看磁盘分区情况，找到安装 Manjaro 的磁盘，假设为 <code>/dev/sda</code>。</p>\n<p>我的磁盘分区如下：</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">设备            起点       末尾      扇区   大小    类型<br>/dev/sda1      <span class=\"hljs-number\"> 2048 </span>   <span class=\"hljs-number\"> 821247 </span>  <span class=\"hljs-number\"> 819200 </span>  400M EFI 系统<br>/dev/sda2    <span class=\"hljs-number\"> 821248 </span><span class=\"hljs-number\"> 723390463 </span>722569216 344.5G Linux 文件系统<br>/dev/sda3 <span class=\"hljs-number\"> 723390464 </span><span class=\"hljs-number\"> 983437311 </span>260046848   124G Linux 文件系统<br>/dev/sda4 <span class=\"hljs-number\"> 983437312 </span>1000214527 <span class=\"hljs-number\"> 16777216 </span>    8G Linux 文件系统<br></code></pre></td></tr></table></figure>\n\n<p>可以确定，<code>/dev/sda1</code> 是 EFI 系统分区，<code>/dev/sda2</code> 是系统所在分区。</p>\n<h4 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h4><p>挂载系统分区:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mount /dev/sda2 /mnt<br></code></pre></td></tr></table></figure>\n\n<p>将当前系统的工具分区挂载到 <code>/mnt</code> 下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mount --<span class=\"hljs-built_in\">bind</span> /dev /mnt/dev<br>mount --<span class=\"hljs-built_in\">bind</span> /proc /mnt/proc<br>mount --<span class=\"hljs-built_in\">bind</span> /sys /mnt/sys<br></code></pre></td></tr></table></figure>\n\n<p>将 EFI 分区挂载到 <code>/mnt/boot/efi</code> 下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">mount /dev/sda1 /mnt/boot/efi<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"进入系统\"><a href=\"#进入系统\" class=\"headerlink\" title=\"进入系统\"></a>进入系统</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">chroot</span> /mnt<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"重新安装-GRUB\"><a href=\"#重新安装-GRUB\" class=\"headerlink\" title=\"重新安装 GRUB\"></a>重新安装 GRUB</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable<br></code></pre></td></tr></table></figure>\n\n<p>具体参数需要根据实际情况进行修改。</p>\n<h4 id=\"在这之后\"><a href=\"#在这之后\" class=\"headerlink\" title=\"在这之后\"></a>在这之后</h4><p>重启，进入通过 GRUB 引导系统。</p>\n<p>在系统中使用 <code>sudo grub-install --recheck /dev/sda</code> 命令再次安装 GRUB，确保系统能够正常启动。</p>\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>接下来的内容是我的整个修复流程，包含了如何在搜索引擎查找问题、根据文章内容调整目标等杂碎的内容，和我在修复过程中的一些感想。</p>\n<h3 id=\"为什么会出现这个问题\"><a href=\"#为什么会出现这个问题\" class=\"headerlink\" title=\"为什么会出现这个问题\"></a>为什么会出现这个问题</h3><p>不是很清楚。</p>\n<p>在启动 Manjaro 前我不小心打开了电脑里的 Windows 系统，但没有连接移动硬盘。</p>\n<p>按照以往的经验，这最多只会导致找不到 GRUB 的位置，手动指定 GRUB 所在分区就可以启动系统。</p>\n<p>但这次不大一样。</p>\n<p>在打开 GRUB 之后，尝试引导内核，就发现了这个问题。</p>\n<h3 id=\"初步解决思路\"><a href=\"#初步解决思路\" class=\"headerlink\" title=\"初步解决思路\"></a>初步解决思路</h3><p><del>立刻格式化磁盘，重新安装 Manjaro。</del></p>\n<p>我已经不是曾经那个只会重装的我了，这次我希望可以解决问题，而不是简单地重装。</p>\n<p>首先，我 Google 了这个错误，发现了几篇内容相关的文章。</p>\n<p><a href=\"https://forum.artixlinux.org/index.php/topic,4668.0.html\">报错与我一致的文章</a>，但没有给出解决方案。</p>\n<p><a href=\"https://www.reddit.com/r/archlinux/comments/x2qb4w/grub_aborts_loading_linux_because_of_an_out_of/\">要我删除 GRUB 和 UEFI 所在分区所有内容的文章</a>，有点可怕，不敢这么干。</p>\n<p><a href=\"https://bbs.archlinux.org/viewtopic.php?id=280230\">提到应该重新安装 GRUB 的文章</a>，这还有点道理。</p>\n<p>于是，我的目标转变为重新安装 GRUB。</p>\n<h3 id=\"重新安装-GRUB-1\"><a href=\"#重新安装-GRUB-1\" class=\"headerlink\" title=\"重新安装 GRUB\"></a>重新安装 GRUB</h3><p>在之前遇到找不到 GRUB 分区的问题时，在手动引导然后进入系统后，我会执行 <code>sudo grub-install --recheck /dev/sda</code> 重新安装 GRUB，解决这个问题。</p>\n<p>那这次的觉得方案应该是差不多的……吧？</p>\n<p>不对啊，这次是在 LiveCD 的系统里操作，怎么能直接安装 GRUB 呢？</p>\n<p>这个问题比较难描述。</p>\n<p>我先是 Google <code>grub-install 修复 GRUB</code>，中文网站的内容都是关于在可以启动的系统下修复 GRUB 的，没有我需要的内容。</p>\n<p>然后我开始求助于 ChatGPT，输入的 Prompts 是：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">I am <span class=\"hljs-keyword\">using</span> Manjaro <span class=\"hljs-keyword\">with</span> GRUB.<br>When I booted <span class=\"hljs-keyword\">into</span> <span class=\"hljs-keyword\">the</span> <span class=\"hljs-keyword\">system</span>, <span class=\"hljs-keyword\">it</span> says <span class=\"hljs-string\">&quot;sparse file not allowed 452 out of range pointer&quot;</span>. How <span class=\"hljs-built_in\">to</span> fix <span class=\"hljs-keyword\">it</span>?<br></code></pre></td></tr></table></figure>\n\n<p>不难发现，我并没有说明我使用的是 UEFI 引导，这直接影响到了 ChatGPT 回复的准确性。</p>\n<p>ChatGPT 给出的修复步骤与上述的相差不大，只是在挂载系统分区和工具分区后，直接尝试执行 <code>grub-install</code> 命令，尝试修复。</p>\n<p><code>grub-install</code> 返回错误 <code>this gpt partition label contains no bios boot partition</code> 把我弄得更懵了。</p>\n<p>再次 Google 这个问题，发现了 <a href=\"https://superuser.com/questions/903112/grub2-install-this-gpt-partition-label-contains-no-bios-boot-partition\">这篇在长篇大论讲 GRUB 的文章</a>，虽然没有给出解决方案，但它让我意识到 UEFI 和 Legacy BIOS 两种启动方式的区别。</p>\n<h3 id=\"UEFI-和-Legacy-BIOS\"><a href=\"#UEFI-和-Legacy-BIOS\" class=\"headerlink\" title=\"UEFI 和 Legacy BIOS\"></a>UEFI 和 Legacy BIOS</h3><p>UEFI 和 Legacy BIOS 是两种启动方式，它们的区别在于，Legacy BIOS 是在 BIOS 中直接加载内核，而 UEFI 是在 BIOS 中加载 EFI 系统，然后由 EFI 系统加载内核。</p>\n<p>使用 UEFI 引导的系统一般都有一个 200MB 到 400MB 的 EFI 系统分区，用于存放 EFI 系统。在上述的，我的硬盘分区中可以看到。</p>\n<p>使用 <code>findmnt</code> 命令可以查看当前系统的挂载情况，其中 <code>TARGET</code> 列就是挂载点，<code>SOURCE</code> 列就是挂载的分区。</p>\n<p>EFI 分区的挂载情况为：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">TARGET      <span class=\"hljs-keyword\">SOURCE</span>      FSTYPE  <span class=\"hljs-keyword\">OPTIONS</span><br><span class=\"hljs-regexp\">/boot/</span>efi   <span class=\"hljs-regexp\">/dev/</span>sda1   vfat    rw,relatime,fm<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，<code>/boot/efi</code> 里的内容正是 EFI 系统分区的内容。（我也是刚学到这个知识的）</p>\n<h3 id=\"解决-UEFI-相关问题\"><a href=\"#解决-UEFI-相关问题\" class=\"headerlink\" title=\"解决 UEFI 相关问题\"></a>解决 UEFI 相关问题</h3><p>在修复过程中，我是通过 Google 发现上述的问题。</p>\n<p><a href=\"https://superuser.com/questions/1390428/grub-install-warning-this-gpt-partition-label-contains-no-bios-boot-partition\">这篇文章</a> 给了我莫大的帮助。</p>\n<p>其中提到了 EFI 分区，也提到了如何正确安装 UEFI 引导的 GRUB：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> grub-install --target=x86_64-efi --efi-directory=/boot/efi<br><span class=\"hljs-built_in\">sudo</span> grub-install --target=x86_64-efi --efi-directory=/boot/efi --removable<br></code></pre></td></tr></table></figure>\n\n<p>在补充挂载 EFI 分区、切换 Root 目录后，执行第一条命令，发现有错误。尝试执行第二条命令，发现没有错误，代表 GRUB 已经重新安装成功。</p>\n<p>此时我想起来，在之前安装 GRUB 时，会提示 <code>正在为 x86_64-efi 平台进行安装</code>，我才意识到前面的修复过程并没有去指定平台。</p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><p>总之，这就是我此次修复的心路历程。我没有研究过 UEFI 和 Legacy BIOS 的区别，也没有研究过 GRUB 的安装过程，所以在修复过程中，我是通过 Google 和 ChatGPT 的帮助才解决了这个问题。</p>\n<p>希望这个探索过程能给你一些启发吧。</p>\n<hr>\n<p>此文章以 <em>我无所谓 By 不 By 什么 AI，对我有帮助的文章就是好文章</em> 标识发布。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/8b115688.html",
            "url": "https://blog.udon.eu.org/archives/8b115688.html",
            "title": "使用 Docker Compose 部署音乐服务器 Navidrome",
            "date_published": "2023-01-31T04:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"服务介绍\"><a href=\"#服务介绍\" class=\"headerlink\" title=\"服务介绍\"></a>服务介绍</h2><p>Navidrome 是一款兼容 Subsonic API 的开源音乐服务器软件，它提供了一个不错的 WebUI，也可以将支持 Subsonic API 的客户端接入。</p>\n<p>目前项目正处在活跃开发中，各种各样的新功能正在陆续加入。</p>\n<h2 id=\"我的客户端选择\"><a href=\"#我的客户端选择\" class=\"headerlink\" title=\"我的客户端选择\"></a>我的客户端选择</h2><h3 id=\"电脑端\"><a href=\"#电脑端\" class=\"headerlink\" title=\"电脑端\"></a>电脑端</h3><p>自带 WebUI, <a href=\"https://github.com/jeffvli/sonixd\">Sonixd</a> 【跨平台】</p>\n<h3 id=\"iOS\"><a href=\"#iOS\" class=\"headerlink\" title=\"iOS\"></a>iOS</h3><p><a href=\"https://apps.apple.com/us/app/play-sub-music-streamer/id955329386\">play:sub</a> 【付费软件 4.99$】</p>\n<h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>采用 Docker Compose 部署 Navidrome，使用 Nginx 作为反向代理。</p>\n<h2 id=\"Docker-Compose-配置文件\"><a href=\"#Docker-Compose-配置文件\" class=\"headerlink\" title=\"Docker Compose 配置文件\"></a>Docker Compose 配置文件</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&quot;3&quot;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">navidrome:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">deluan/navidrome:latest</span><br>    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">navidrome</span><br>    <span class=\"hljs-attr\">user:</span> <span class=\"hljs-number\">1000</span><span class=\"hljs-string\">:1000</span> <span class=\"hljs-comment\"># should be owner of volumes</span><br>    <span class=\"hljs-attr\">ports:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;127.0.0.1:4533:4533&quot;</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">unless-stopped</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-attr\">ND_SCANSCHEDULE:</span> <span class=\"hljs-string\">1h</span><br>      <span class=\"hljs-attr\">ND_LOGLEVEL:</span> <span class=\"hljs-string\">info</span>  <br>      <span class=\"hljs-attr\">ND_SESSIONTIMEOUT:</span> <span class=\"hljs-string\">24h</span><br>      <span class=\"hljs-attr\">ND_BASEURL:</span> <span class=\"hljs-string\">&quot;&quot;</span><br>      <span class=\"hljs-attr\">ND_SEARCHFULLSTRING:</span> <span class=\"hljs-literal\">true</span><br>      <span class=\"hljs-comment\"># Optional: fetch artist images from spotify</span><br>      <span class=\"hljs-attr\">ND_SPOTIFY_ID:</span><br>      <span class=\"hljs-attr\">ND_SPOTIFY_SECRET:</span><br>      <span class=\"hljs-comment\"># Optional: fetch artist information from last.fm</span><br>      <span class=\"hljs-attr\">ND_LASTFM_APIKEY:</span><br>      <span class=\"hljs-attr\">ND_LASTFM_SECRET:</span><br>      <span class=\"hljs-attr\">ND_LASTFM_LANGUAGE:</span> <span class=\"hljs-string\">en</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;./data:/data&quot;</span>      <span class=\"hljs-comment\"># Navidrome data</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/APTH-TO/navidrome-music:/music:ro&quot;</span> <span class=\"hljs-comment\"># Music folder</span><br></code></pre></td></tr></table></figure>\n<p>使用命令 <code>docker compose up -d</code> 启动服务。</p>\n<h2 id=\"Nginx-配置文件\"><a href=\"#Nginx-配置文件\" class=\"headerlink\" title=\"Nginx 配置文件\"></a>Nginx 配置文件</h2><p>我建议使用 DigitalOcean 的 Nginx 配置生产工具，示例配置如下：</p>\n<p><a href=\"https://www.digitalocean.com/community/tools/nginx?domains.0.server.domain=music.example.com&domains.0.php.php=false&domains.0.reverseProxy.reverseProxy=true&domains.0.reverseProxy.proxyPass=http://127.0.0.1:4533&domains.0.routing.root=false&domains.0.routing.index=index.html&domains.0.routing.fallbackHtml=true&global.app.lang=zhCN%5C\">示例配置</a></p>\n<p>也可参考下述配置，此为 DigitalOcean 生成配置的简化版：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span>                  <span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">listen</span>                  [::]:<span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">server_name</span>             music.example.com;<br><br>    <span class=\"hljs-comment\"># SSL</span><br>    <span class=\"hljs-attribute\">ssl_certificate</span>         /etc/letsencrypt/live/music.example.com/fullchain.pem;<br>    <span class=\"hljs-attribute\">ssl_certificate_key</span>     /etc/letsencrypt/live/music.example.com/privkey.pem;<br>    <span class=\"hljs-attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/music.example.com/chain.pem;<br><br>    <span class=\"hljs-comment\"># logging</span><br>    <span class=\"hljs-attribute\">access_log</span>              /var/log/nginx/access.log combined buffer=<span class=\"hljs-number\">512k</span> flush=<span class=\"hljs-number\">1m</span>;<br>    <span class=\"hljs-attribute\">error_log</span>               /var/log/nginx/<span class=\"hljs-literal\">error</span>.log <span class=\"hljs-literal\">warn</span>;<br><br>    <span class=\"hljs-comment\"># reverse proxy</span><br>    <span class=\"hljs-section\">location</span> / &#123;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> Host     <span class=\"hljs-variable\">$host</span>;<br>      <span class=\"hljs-attribute\">proxy_pass</span>                http://127.0.0.1:4533;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\"># subdomains redirect</span><br><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span>                  <span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">listen</span>                  [::]:<span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">server_name</span>             <span class=\"hljs-regexp\">*.music.example.com</span>;<br><br>    <span class=\"hljs-comment\"># SSL</span><br>    <span class=\"hljs-attribute\">ssl_certificate</span>         /etc/letsencrypt/live/music.example.com/fullchain.pem;<br>    <span class=\"hljs-attribute\">ssl_certificate_key</span>     /etc/letsencrypt/live/music.example.com/privkey.pem;<br>    <span class=\"hljs-attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/music.example.com/chain.pem;<br>    <span class=\"hljs-attribute\">return</span>                  <span class=\"hljs-number\">301</span> https://music.example.com<span class=\"hljs-variable\">$request_uri</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"音乐管理\"><a href=\"#音乐管理\" class=\"headerlink\" title=\"音乐管理\"></a>音乐管理</h2><p>我一直以文件夹分类的方式管理音乐，但 Navidrome 并不支持文件夹分类。它是根据音乐标签来分类的，例如按照歌手、专辑等依据分类歌曲。</p>\n<p>因此，若想使用 Navidrome，需要对音乐进行标签管理。</p>\n<p>大约两年前，我写了 <a href=\"https://blog.udon.eu.org/archives/6b40e5ad.html\">一篇文章</a> 介绍使用 Music Tag 和 Foobar2000 两款软件来管理音乐。</p>\n<p>Music Tag 的标签源是网易云音乐、豆瓣音乐、QQ 音乐等国内音乐平台，说实话，这些平台的音乐标签质量都不是很好，所以我一直在寻找更好的音乐标签源。</p>\n<p>直到我发现了 <a href=\"https://musicbrainz.org/\">MusicBrainz</a>，这是一个开源的音乐标签数据库，任何人都可以为它贡献标签。在体验之后，我发现 MusicBrainz 的音乐标签质量要比国内音乐平台的标签质量好很多，所以我决定将 MusicBrainz 作为我的音乐标签源。</p>\n<p>我使用 <a href=\"https://picard.musicbrainz.org/\">Picard</a> 这款软件来从 MusicBrainz 获取音乐标签。</p>\n<p>将音乐导入 Picard 后，它会自动从 MusicBrainz 获取音乐标签，然后将标签写入音乐文件，十分方便。</p>\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><p>不论是使用 Navidrome 自带的 Web 界面，还是使用兼容 Subsonic API 的客户端，只要连接到 Navidrome，便可开始享受你的私人音乐库。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/f9bfe16a.html",
            "url": "https://blog.udon.eu.org/archives/f9bfe16a.html",
            "title": "使用 Docker Compose 部署 Keycloak 20",
            "date_published": "2023-01-22T12:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"部署方式\"><a href=\"#部署方式\" class=\"headerlink\" title=\"部署方式\"></a>部署方式</h2><p>采用 Docker Compose 部署，使用 Postgres 作为数据库，使用 Nginx 作为反向代理。</p>\n<h2 id=\"Docker-Compose-配置文件\"><a href=\"#Docker-Compose-配置文件\" class=\"headerlink\" title=\"Docker Compose 配置文件\"></a>Docker Compose 配置文件</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3&#x27;</span><br><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">keycloak:</span><br>      <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">quay.io/keycloak/keycloak:latest</span><br>      <span class=\"hljs-attr\">environment:</span><br>        <span class=\"hljs-attr\">KC_DB:</span> <span class=\"hljs-string\">postgres</span><br>        <span class=\"hljs-attr\">KC_DB_URL:</span> <span class=\"hljs-string\">jdbc:postgresql://db:5432/keycloak</span><br>        <span class=\"hljs-attr\">KC_DB_USERNAME:</span> <span class=\"hljs-string\">keycloak</span><br>        <span class=\"hljs-attr\">KC_DB_PASSWORD:</span> <span class=\"hljs-string\">keycloak</span><br>        <span class=\"hljs-attr\">KC_HTTP_ENABLED:</span> <span class=\"hljs-literal\">true</span>                   <span class=\"hljs-comment\"># 开启 HTTP</span><br>        <span class=\"hljs-attr\">KC_HOSTNAME_STRICT:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">KC_HOSTNAME_STRICT_HTTPS:</span> <span class=\"hljs-literal\">false</span><br>        <span class=\"hljs-attr\">KC_HTTP_RELATIVE_PATH:</span> <span class=\"hljs-string\">&#x27;/&#x27;</span>              <span class=\"hljs-comment\"># Keycloak 应用的相对路径</span><br>        <span class=\"hljs-attr\">KC_HTTP_PORT:</span> <span class=\"hljs-number\">8080</span>                      <span class=\"hljs-comment\"># HTTP 端口</span><br>        <span class=\"hljs-attr\">KEYCLOAK_ADMIN:</span> <span class=\"hljs-string\">MY_USERNAME</span>             <span class=\"hljs-comment\"># 管理员账号，仅初始化时使用</span><br>        <span class=\"hljs-attr\">KEYCLOAK_ADMIN_PASSWORD:</span> <span class=\"hljs-string\">MY_PASSWORD</span>    <span class=\"hljs-comment\"># 管理员密码，仅初始化时使用</span><br>        <span class=\"hljs-attr\">PROXY_ADDRESS_FORWARDING:</span> <span class=\"hljs-literal\">true</span>          <span class=\"hljs-comment\"># 使用反向代理必须开启</span><br>        <span class=\"hljs-attr\">KC_PROXY:</span> <span class=\"hljs-string\">edge</span>                          <span class=\"hljs-comment\"># 反向代理模式，详见文档</span><br>      <span class=\"hljs-attr\">entrypoint:</span> <span class=\"hljs-string\">/opt/keycloak/bin/kc.sh</span> <span class=\"hljs-string\">start</span> <span class=\"hljs-comment\"># 第一次运行后可以加上 --optimized 参数，加快二次启动速度</span><br>      <span class=\"hljs-attr\">ports:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:18080:8080</span>      <span class=\"hljs-comment\"># Keycloak 应用端口</span><br>      <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">unless-stopped</span><br>  <span class=\"hljs-attr\">db:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">postgres:14</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">unless-stopped</span><br>    <span class=\"hljs-attr\">environment:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">POSTGRES_USER=keycloak</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">POSTGRES_PASSWORD=keycloak</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">POSTGRES_DB=keycloak</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./postgres-data:/var/lib/postgresql/data</span>    <span class=\"hljs-comment\"># 数据库数据保存位置</span><br></code></pre></td></tr></table></figure>\n\n<p>使用命令 <code>docker compose up -d</code> 启动服务。</p>\n<h2 id=\"Nginx-配置\"><a href=\"#Nginx-配置\" class=\"headerlink\" title=\"Nginx 配置\"></a>Nginx 配置</h2><p>我建议使用 DigitalOcean 的 Nginx 配置生产工具，示例配置如下：</p>\n<p><a href=\"https://www.digitalocean.com/community/tools/nginx?domains.0.server.domain=auth.example.com&domains.0.php.php=false&domains.0.reverseProxy.reverseProxy=true&domains.0.reverseProxy.proxyPass=http://127.0.0.1:18080&domains.0.routing.root=false&global.app.lang=zhCN\">示例配置</a></p>\n<p>也可参考下述配置，此为 DigitalOcean 生成配置的简化版：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span>                  <span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">listen</span>                  [::]:<span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">server_name</span>             auth.example.com;<br><br>    <span class=\"hljs-comment\"># SSL</span><br>    <span class=\"hljs-attribute\">ssl_certificate</span>         /etc/letsencrypt/live/auth.example.com/fullchain.pem;<br>    <span class=\"hljs-attribute\">ssl_certificate_key</span>     /etc/letsencrypt/live/auth.example.com/privkey.pem;<br>    <span class=\"hljs-attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/auth.example.com/chain.pem;<br><br>    <span class=\"hljs-comment\"># logging</span><br>    <span class=\"hljs-attribute\">access_log</span>              /var/log/nginx/access.log combined buffer=<span class=\"hljs-number\">512k</span> flush=<span class=\"hljs-number\">1m</span>;<br>    <span class=\"hljs-attribute\">error_log</span>               /var/log/nginx/<span class=\"hljs-literal\">error</span>.log <span class=\"hljs-literal\">warn</span>;<br><br>    <span class=\"hljs-comment\"># reverse proxy</span><br>    <span class=\"hljs-section\">location</span> / &#123;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> Host       <span class=\"hljs-variable\">$host</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP  <span class=\"hljs-variable\">$remote_addr</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"hljs-variable\">$scheme</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Auth-Request-Redirect <span class=\"hljs-variable\">$request_uri</span>;<br>      <span class=\"hljs-attribute\">proxy_buffer_size</span>   <span class=\"hljs-number\">128k</span>;<br>      <span class=\"hljs-attribute\">proxy_buffers</span>   <span class=\"hljs-number\">4</span> <span class=\"hljs-number\">256k</span>;<br>      <span class=\"hljs-attribute\">proxy_busy_buffers_size</span>   <span class=\"hljs-number\">256k</span>;<br>      <span class=\"hljs-attribute\">proxy_pass</span>            http://127.0.0.1:18080;<br>    &#125;<br><br>    <span class=\"hljs-section\">location</span> /auth/realms &#123;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> Host       <span class=\"hljs-variable\">$host</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP  <span class=\"hljs-variable\">$remote_addr</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"hljs-variable\">$scheme</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Auth-Request-Redirect <span class=\"hljs-variable\">$request_uri</span>;<br>      <span class=\"hljs-attribute\">proxy_pass</span> http://127.0.0.1:18080;<br>    &#125;<br><br>    <span class=\"hljs-section\">location</span> /auth/resources &#123;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> Host       <span class=\"hljs-variable\">$host</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP  <span class=\"hljs-variable\">$remote_addr</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"hljs-variable\">$scheme</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Auth-Request-Redirect <span class=\"hljs-variable\">$request_uri</span>;<br>      <span class=\"hljs-attribute\">proxy_pass</span> http://127.0.0.1:18080;<br>     &#125;<br><br>    <span class=\"hljs-section\">location</span> /auth/js &#123;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> Host       <span class=\"hljs-variable\">$host</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP  <span class=\"hljs-variable\">$remote_addr</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-Proto <span class=\"hljs-variable\">$scheme</span>;<br>      <span class=\"hljs-attribute\">proxy_set_header</span> X-Auth-Request-Redirect <span class=\"hljs-variable\">$request_uri</span>;<br>      <span class=\"hljs-attribute\">proxy_pass</span> http://127.0.0.1:18080;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\"># subdomains redirect</span><br><span class=\"hljs-section\">server</span> &#123;<br>    <span class=\"hljs-attribute\">listen</span>                  <span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">listen</span>                  [::]:<span class=\"hljs-number\">443</span> ssl http2;<br>    <span class=\"hljs-attribute\">server_name</span>             <span class=\"hljs-regexp\">*.auth.example.com</span>;<br><br>    <span class=\"hljs-comment\"># SSL</span><br>    <span class=\"hljs-attribute\">ssl_certificate</span>         /etc/letsencrypt/live/auth.example.com/fullchain.pem;<br>    <span class=\"hljs-attribute\">ssl_certificate_key</span>     /etc/letsencrypt/live/auth.example.com/privkey.pem;<br>    <span class=\"hljs-attribute\">ssl_trusted_certificate</span> /etc/letsencrypt/live/auth.example.com/chain.pem;<br>    <span class=\"hljs-attribute\">return</span>                  <span class=\"hljs-number\">301</span> https://auth.example.com<span class=\"hljs-variable\">$request_uri</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置-Keycloak\"><a href=\"#配置-Keycloak\" class=\"headerlink\" title=\"配置 Keycloak\"></a>配置 Keycloak</h2><h3 id=\"创建-Realm\"><a href=\"#创建-Realm\" class=\"headerlink\" title=\"创建 Realm\"></a>创建 Realm</h3><p>打开 <a href=\"http://127.0.0.1:18080/\">Keycloak 地址</a>，界面如下。</p>\n<p><img src=\"/images/2023-01-22/01.jpg\" alt=\"Keycloak 界面\"></p>\n<p>选择 <code>Administration Console</code>，进入管理界面。</p>\n<p><img src=\"/images/2023-01-22/02.jpg\" alt=\"管理界面\"></p>\n<p>选择箭头指向的下拉菜单，选择 <code>Add realm</code>，创建一个新的 Realm。</p>\n<p><img src=\"/images/2023-01-22/03.jpg\" alt=\"创建 Realm\"></p>\n<p>填写 Realm 名称，点击 <code>Create</code>。</p>\n<h3 id=\"创建-Client\"><a href=\"#创建-Client\" class=\"headerlink\" title=\"创建 Client\"></a>创建 Client</h3><p><img src=\"/images/2023-01-22/04.jpg\" alt=\"管理界面\"></p>\n<p>选择 <code>Clients</code>。</p>\n<p><img src=\"/images/2023-01-22/05.jpg\" alt=\"Client 管理界面\"></p>\n<p>点击 <code>Create client</code>。</p>\n<p><img src=\"/images/2023-01-22/06.jpg\" alt=\"创建 Client\"></p>\n<p>填写 Client 相关信息，点击 <code>Next</code>。</p>\n<p><img src=\"/images/2023-01-22/07.jpg\" alt=\"配置 Client\"></p>\n<p>按需求选择 Client 的配置，点击 <code>Save</code>。</p>\n<p><img src=\"/images/2023-01-22/08.jpg\" alt=\"Client 创建完成\"></p>\n<p>至此，Keycloak 配置完成，且创建了第一个测试用 Client。</p>\n<h3 id=\"测试-Client\"><a href=\"#测试-Client\" class=\"headerlink\" title=\"测试 Client\"></a>测试 Client</h3><p>可根据 <a href=\"https://www.keycloak.org/getting-started/getting-started-docker#_secure_your_first_app\">官方教程</a> 测试该 Client。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>上述便是使用 Docker Compose 部署 Keycloak 20 的方法，我们顺利创建了第一个测试用 Client，接下来可以根据自己的需求进行配置。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/e74a90f2.html",
            "url": "https://blog.udon.eu.org/archives/e74a90f2.html",
            "title": "使用再生龙 Clonezilla 备份操作系统",
            "date_published": "2022-08-12T04:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>近日购入了一只闪迪的 CZ880 Ｅｘｔｒｅｍｅ ＰＲＯ 固态U盘来装 Manjaro。</p>\n<p>虽然U盘本体是终身质保的，但数据无价，配置一遍系统就要花大把的时间。遂有了备份U盘内整个系统的念头。</p>\n<p>下面跟着我使用再生龙 Clonezilla 把U盘里的系统备份一下吧！</p>\n<h3 id=\"事先准备\"><a href=\"#事先准备\" class=\"headerlink\" title=\"事先准备\"></a>事先准备</h3><p>再生龙是运行在独立操作系统 (Debian&#x2F;Ubuntu) 上的一套软件，因此需要制作启动盘，或使用 Ventoy 等多系统启动方案。（实测 YUMI 无法启动再生龙，故建议使用 Ventoy）</p>\n<h4 id=\"制作启动盘\"><a href=\"#制作启动盘\" class=\"headerlink\" title=\"制作启动盘\"></a>制作启动盘</h4><p>前往 <a href=\"https://rufus.ie/zh/\">Rufus 官网</a> 下载 Rufus 启动盘制作工具。</p>\n<p>前往 <a href=\"https://clonezilla.org/downloads/download.php?branch=stable\">Clonezilla 官网</a> 下载再生龙映像。</p>\n<p>使用 Rufus 将再生龙映像烧写进另一个U盘即可。</p>\n<p><strong>U盘内数据将丢失，请做好备份！</strong></p>\n<h4 id=\"使用多系统启动\"><a href=\"#使用多系统启动\" class=\"headerlink\" title=\"使用多系统启动\"></a>使用多系统启动</h4><p>前往 <a href=\"https://www.ventoy.net/\">Ventoy 官网</a> 下载安装包（兼容 Windows 与 Linux），将你的另一个U盘制作为 Ventoy 多启动盘。</p>\n<p>前往 <a href=\"https://clonezilla.org/downloads/download.php?branch=stable\">Clonezilla 官网</a> 下载再生龙映像。</p>\n<p>将再生龙映像拷贝至 Ventoy 多启动盘中。</p>\n<p>选择你想存放备份数据的目的地，创建一个存放备份映像的文件夹（注意目录名称中不能带有空格）。</p>\n<p>剧透一下，40G 的系统盘备份之后大约占了 16-17G. 请留出足够的空间（建议和待备份的数据等大小）。</p>\n<h3 id=\"开始备份\"><a href=\"#开始备份\" class=\"headerlink\" title=\"开始备份\"></a>开始备份</h3><p>瞎眼警告：由于没有合适的截屏方式，我很不愿意地采取了 拍 屏 的方式，敬请谅解。</p>\n<h4 id=\"启动再生龙系统\"><a href=\"#启动再生龙系统\" class=\"headerlink\" title=\"启动再生龙系统\"></a>启动再生龙系统</h4><p>确保你的电脑关闭了安全启动，若还打开着，需要在 BIOS 中将其关闭。</p>\n<p>插入刚刚制作好的启动盘&#x2F;Ventoy 多启动盘，在电脑启动时猛敲键盘的…某个键，这因电脑型号而异，打开启动菜单。</p>\n<p>选择插入的启动盘&#x2F;多启动盘。</p>\n<p>启动盘用户若没有太大的兼容性问题，就能看到再生龙的启动菜单。</p>\n<p>多启动盘用户还要再多一步，在 Ventoy 菜单内选中再生龙的映像，如下图所示，即可打开再生龙的启动菜单。</p>\n<p><img src=\"/images/2022-08-12/1.jpeg\" alt=\"Ventoy 多启动菜单\"></p>\n<p>P.S. 我的笔记本兴许和 Ventoy 的 UEFI 模式相性不大好，在 BIOS 中开启了 Lagacy 兼容模式后，使用 Legacy 模式才能开启 Ventoy。</p>\n<h4 id=\"选择再生龙启动方式\"><a href=\"#选择再生龙启动方式\" class=\"headerlink\" title=\"选择再生龙启动方式\"></a>选择再生龙启动方式</h4><p><img src=\"/images/2022-08-12/2.jpeg\" alt=\"再生龙启动菜单\"></p>\n<p>经典的 GRUB 启动菜单，一般来说选择默认的第一项启动方式即可。</p>\n<h5 id=\"VGA-启动花屏\"><a href=\"#VGA-启动花屏\" class=\"headerlink\" title=\"VGA 启动花屏\"></a>VGA 启动花屏</h5><p>我的电脑遇到了在 VGA 800x600 模式下花屏的问题。</p>\n<p>最终进入 <code>Other mods of Clonezilla live</code> 菜单，</p>\n<p><img src=\"/images/2022-08-12/3.jpeg\" alt=\"其他启动模式\"></p>\n<p>选择了上图中的 KVM &amp; To RAM 模式，可以正常启动了。</p>\n<h5 id=\"USB-口不够用的用户\"><a href=\"#USB-口不够用的用户\" class=\"headerlink\" title=\"USB 口不够用的用户\"></a>USB 口不够用的用户</h5><p>我这台笔记本只有两个 USB 口，其中一个要给备份源头 CZ880,另一个则要给移动硬盘，故选择了 <code>To RAM</code> 模式，将再生龙载入内存，就可以拔掉多启动U盘，空出 USB 口给移动硬盘了。</p>\n<h4 id=\"语言配置\"><a href=\"#语言配置\" class=\"headerlink\" title=\"语言配置\"></a>语言配置</h4><p><img src=\"/images/2022-08-12/4.jpeg\" alt=\"语言配置\"></p>\n<p>选择自己想用的语言即可。</p>\n<p><img src=\"/images/2022-08-12/5.jpeg\" alt=\"键盘配置\"></p>\n<p>保持默认配置即可。</p>\n<h4 id=\"备份配置\"><a href=\"#备份配置\" class=\"headerlink\" title=\"备份配置\"></a>备份配置</h4><p><img src=\"/images/2022-08-12/6.jpeg\" alt=\"功能选择\"></p>\n<p>我们选 <code>Start Clonezilla 使用再生龙</code>。</p>\n<p>命令行可以在熟悉了配置之后使用。</p>\n<p><img src=\"/images/2022-08-12/7.jpeg\" alt=\"备份模式选择\"></p>\n<p>此处我们选择第一项 <code>device-image 硬盘/分区[存到/来自]镜像文件</code>。</p>\n<p>若想进行两盘对拷，可以选择第二项。我还没有尝试过。</p>\n<h4 id=\"挂载存储目录\"><a href=\"#挂载存储目录\" class=\"headerlink\" title=\"挂载存储目录\"></a>挂载存储目录</h4><p><img src=\"/images/2022-08-12/8.jpeg\" alt=\"存储目录选择\"></p>\n<p>这次我打算使用移动硬盘备份系统，故选择第一项 <code>local dev 使用本机的分区</code>。</p>\n<p><img src=\"/images/2022-08-12/10.jpeg\" alt=\"插入 USB 设备提示\"></p>\n<p>随后，再生龙会提示插入想要挂载的 USB 设备，按照提示做即可。</p>\n<p><img src=\"/images/2022-08-12/11.jpeg\" alt=\"检测到的存储设备\"></p>\n<p>此时画面会动态显示系统识别到的存储设备。看到期望的目标设备时，按下 <code>Ctrl-C</code> 停止搜索。</p>\n<p><img src=\"/images/2022-08-12/12.jpeg\" alt=\"分区选择\"></p>\n<p>在扫描完电脑当前安装的所有硬盘的分区后，你需要选择备份镜像文件存放的那个分区。</p>\n<p>如图，我希望备份到大小为 1.8T 的移动硬盘上，故选择最后一项 <code>sdc2</code>。</p>\n<p><img src=\"/images/2022-08-12/13.jpeg\" alt=\"是否检查并修复文件系统\"></p>\n<p>随后，再生龙询问你是否需要检查并修复挂载的文件系统，我们选第一项否就好了。</p>\n<p><img src=\"/images/2022-08-12/14.jpeg\" alt=\"备份位置选择\"></p>\n<p>接着，就是选择备份镜像存放的位置。</p>\n<p>使用键盘的方向键选择目录，使用 <code>Tab</code> 跳转到下方的选项，选择 <code>Browse</code> 并敲击回车就可以进入到此目录。</p>\n<p>若希望在选中目录下存放备份镜像文件（是一个文件夹），就可以选择 <code>Done</code> 选项，回车确认。</p>\n<p><img src=\"/images/2022-08-12/15.jpeg\" alt=\"是否检查镜像可还原性\"></p>\n<p>系统询问是否检查生成的备份镜像的可还原性，这里我们选是，多花一点时间能确保备份的完整性。</p>\n<p><img src=\"/images/2022-08-12/16.jpeg\" alt=\"是否对镜像加密\"></p>\n<p>镜像加密，依个人喜好选择。</p>\n<p><img src=\"/images/2022-08-12/18.jpeg\" alt=\"备份模式确认\"></p>\n<p>待上述配置完成后，系统会向你再次确认备份的内容与目的地。</p>\n<p>确认无误后输入 <code>y</code> 并敲击回车继续。</p>\n<h4 id=\"简单模式-高级模式\"><a href=\"#简单模式-高级模式\" class=\"headerlink\" title=\"简单模式&#x2F;高级模式\"></a>简单模式&#x2F;高级模式</h4><p>此时应该有一个模式选择，问你想要使用简单模式还是专家模式。</p>\n<p>我建议选择 专家模式，简单模式能选择的参数较少。</p>\n<p><img src=\"/images/2022-08-12/20.jpeg\" alt=\"模式选择\"></p>\n<p>接下来的三个选项，全部保持默认配置即可。</p>\n<p><img src=\"/images/2022-08-12/21.jpeg\" alt=\"高级设置1\"></p>\n<p><img src=\"/images/2022-08-12/22.jpeg\" alt=\"高级设置2\"></p>\n<p><img src=\"/images/2022-08-12/23.jpeg\" alt=\"高级设置3\"></p>\n<h4 id=\"压缩方式选择\"><a href=\"#压缩方式选择\" class=\"headerlink\" title=\"压缩方式选择\"></a>压缩方式选择</h4><p><img src=\"/images/2022-08-12/24.jpeg\" alt=\"压缩方式选择\"></p>\n<p>此处选择第三项 <code>-z2p 使用并行 bzip2 压缩</code>。</p>\n<p>实测 bzip2 压缩速度比较快，产生的备份镜像的体积也不算大。</p>\n<p>下图为选择了第一项 <code>-z1p 使用并行的 gzip 压缩</code> 的速度：</p>\n<p><img src=\"/images/2022-08-12/19.jpeg\" alt=\"并行 gzip 压缩速度\"></p>\n<p>下图为选择了第三项 <code>-z2p 使用并行 bzip2 压缩</code> 的速度：</p>\n<p><img src=\"/images/2022-08-12/26.jpeg\" alt=\"并行 bzip2 压缩速度\"></p>\n<p>可以看出 bzip2 压缩速度比 gzip 快了8倍。</p>\n<p>其他压缩方式的速度，待我测试之后更新文章。</p>\n<p><img src=\"/images/2022-08-12/25.jpeg\" alt=\"分卷大小配置\"></p>\n<p>分卷大小配置保持默认即可。</p>\n<h4 id=\"备份镜像检查\"><a href=\"#备份镜像检查\" class=\"headerlink\" title=\"备份镜像检查\"></a>备份镜像检查</h4><p>待备份完成后，再生龙还会进行一次备份镜像的可还原性检查，如下图：</p>\n<p><img src=\"/images/2022-08-12/27.jpeg\" alt=\"可还原性检查\"></p>\n<p>若得到下图的提示，则备份镜像生成成功了。</p>\n<p><img src=\"/images/2022-08-12/28.jpeg\" alt=\"可还原性检查完成\"></p>\n<p>随后，选择按照意愿选择备份结束后的操作即可。</p>\n<p><img src=\"/images/2022-08-12/29.jpeg\" alt=\"备份结束后操作选择\"></p>\n<p>至此，再生龙 CLonezilla 的基础教学就结束了，你已经学会了如何使用再生龙的图形界面进行备份。</p>\n<p>下面是一些再生龙的高阶（大概很高级）使用方法。</p>\n<h3 id=\"高级操作\"><a href=\"#高级操作\" class=\"headerlink\" title=\"高级操作\"></a>高级操作</h3><h4 id=\"使用无线网络备份\"><a href=\"#使用无线网络备份\" class=\"headerlink\" title=\"使用无线网络备份\"></a>使用无线网络备份</h4><p>上文中，我的电脑仅有两个 USB 口，为备份的流程增添了不必要的麻烦。</p>\n<p>能否使用 Wi-Fi 将备份镜像推送至家中的 NAS 呢？</p>\n<p>再生龙内置了许多通过无线&#x2F;有线网络备份的方法，如下图：</p>\n<p><img src=\"/images/2022-08-12/30.jpeg\" alt=\"备份选项\"></p>\n<p>我们尝试使用 Webdav 来远程备份吧！</p>\n<h5 id=\"利与弊\"><a href=\"#利与弊\" class=\"headerlink\" title=\"利与弊\"></a>利与弊</h5><p>使用 Wi-Fi 备份可以摆脱线缆，更加轻松而优雅地进行备份。</p>\n<p>然而，由于通过 Wi-Fi 或者一切网络传输数据的速度仍然无法比肩有线传输，备份所消耗的时间将是备份至本地磁盘的 3-4 倍。</p>\n<p>备份我U盘中的 40G 的 Manjaro 系统用时 30min 左右。</p>\n<p>倘若你有大把的时间，或家中的内网速度足够快，大可使用无线备份。品着咖啡，看着数据上云（笑）。</p>\n<h5 id=\"预先准备\"><a href=\"#预先准备\" class=\"headerlink\" title=\"预先准备\"></a>预先准备</h5><p>上文中我们选择了基于 Debian 的 Clonezilla Stable 版本，遗憾的是 Debian 系统中并未携带太多驱动程序，因此识别不到我的 Intel AX200 无线网卡。</p>\n<p>经过测试，基于 Ubuntu 的 <a href=\"https://clonezilla.org/downloads/download.php?branch=alternative\">Clonezilla Alternative Stable</a> 版本可以识别到 AX200 网卡。</p>\n<p>点击上方链接即可下载 Clonezilla Alternative Stable 版本的映像。</p>\n<p>重新烧写启动U盘&#x2F;拷贝映像至多启动U盘即可。</p>\n<h6 id=\"又遇到了启动问题\"><a href=\"#又遇到了启动问题\" class=\"headerlink\" title=\"又遇到了启动问题\"></a>又遇到了启动问题</h6><p>使用基于 Ubuntu 的再生龙，上文中使用的 <code>KVM</code> 模式变得无法打开了，且 <code>VGA 800x600</code> 模式是一样的花屏。</p>\n<p>在一番尝试之后，我发现藏在更多启动选项菜单里的 <code>VGA 1024x768</code> 模式可以正常显示。看来基于 Debian 的再生龙也可以使用这个模式。</p>\n<h5 id=\"开始备份-1\"><a href=\"#开始备份-1\" class=\"headerlink\" title=\"开始备份\"></a>开始备份</h5><p><img src=\"/images/2022-08-12/31.jpeg\" alt=\"网络管理\"></p>\n<p>选择了非本地的镜像存储位置后，系统将开启上图的网络管理菜单。</p>\n<p>选择第一项 <code>Edit a connection</code>。</p>\n<p><img src=\"/images/2022-08-12/32.jpeg\" alt=\"连接管理\"></p>\n<p>选择 <code>Add</code> 选项，在弹出菜单中 <code>Wi-Fi</code>。</p>\n<p><img src=\"/images/2022-08-12/33.jpeg\" alt=\"添加 Wi-Fi\"></p>\n<p><code>Profile name</code> 随意填写；</p>\n<p><code>Device</code> 一般填写 <code>wlan0</code>，系统的第一块无线网卡；</p>\n<p>接着，按照自己的情况填写图中划线的三个配置即可。</p>\n<p><img src=\"/images/2022-08-12/34.jpeg\" alt=\"连接状态\"></p>\n<p>保存 Wi-Fi 配置后，就能看到当前配置的连接状态。</p>\n<p>若当前配置名前带 <code>*</code>，且右侧选项为 <code>Deactivate</code>，则 Wi-Fi 已连接成功。</p>\n<p><img src=\"/images/2022-08-12/35.jpeg\" alt=\"填写 Webdav 服务器地址\"></p>\n<p>接着，系统要求填写 Webdav 地址。</p>\n<p><img src=\"/images/2022-08-12/36.jpeg\" alt=\"确认 Webdav 配置\"></p>\n<p>最后，系统会向你确认 Webdav 是否正确。</p>\n<p>若确认无误，即可敲击回车继续。</p>\n<p>接下来的步骤和上述初级教程硬盘挂载之后的流程是完全一样的，请参考上文继续配置。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/f82a3103.html",
            "url": "https://blog.udon.eu.org/archives/f82a3103.html",
            "title": "BETAFPV 高频头固件编译 AttributeError",
            "date_published": "2022-08-06T04:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><p>Python 模块 <code>pypandoc</code> 版本过新，1.8.0 及更高版本已移除了 BETAFPV 高频头固件中仍在使用的 <code>convert</code> 函数。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>安装旧版的 <code>pypandoc</code> 模块。</p>\n<p><code>pip install pypandoc==1.7.0</code></p>\n",
            "tags": [
                "教程",
                "DIY"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/38942a16.html",
            "url": "https://blog.udon.eu.org/archives/38942a16.html",
            "title": "DIY 显示器音箱",
            "date_published": "2022-06-03T07:15:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>新买的显示器（LG 27UL500，虽然因为屏幕问题已经退货了）没有内置音箱，虽然大部分时间都在用耳机，但别人有的东西我不能没有嘛，就买了些材料，DIY 一个外接音箱。</p>\n<p>写作此文章分享一下制作的过程~</p>\n<h3 id=\"物料清单\"><a href=\"#物料清单\" class=\"headerlink\" title=\"物料清单\"></a>物料清单</h3><p><img src=\"/images/2022-06-03/01.JPG\" alt=\"物料清单\"></p>\n<ul>\n<li>PAM8403 数字功放板 5RMB</li>\n</ul>\n<p>接受 5V 电压，可以驱动两个 3W 的喇叭。商品详情页面吹的很厉害，确实底噪很小，而且输出的音量非常高。相当 OK 的功放板。</p>\n<ul>\n<li>8Ω 3W 喇叭两只（带音腔） 2*4RMB + 运费</li>\n</ul>\n<p>音质很不错，声音很大也不会破音，因为是广告机用的喇叭么？</p>\n<ul>\n<li>3.5MM 公头 0.5RMB</li>\n</ul>\n<p>我选的型号是 PJ392，只要是 3.5MM 双声道的公头就行了。</p>\n<ul>\n<li>Type C 母座 0.4RMB</li>\n</ul>\n<p>这个随意选。</p>\n<ul>\n<li>屏蔽线缆 2RMB&#x2F;m</li>\n</ul>\n<p>我买的是4芯的屏蔽线，可供 Type C 头使用（2 power 2 data），音频线只需要三芯（2 data 1 GND），屏蔽线是为了更小的干扰、更好的音质。</p>\n<h3 id=\"开始组装\"><a href=\"#开始组装\" class=\"headerlink\" title=\"开始组装\"></a>开始组装</h3><h4 id=\"3-5MM-线缆\"><a href=\"#3-5MM-线缆\" class=\"headerlink\" title=\"3.5MM 线缆\"></a>3.5MM 线缆</h4><p>剥除一段屏蔽线的外皮，做工还是很不错的，有金属丝和铝箔的屏蔽，塑料膜防水，还有一根抗拉扯的填充芯。</p>\n<p>我选择使用红绿蓝三根线，黄线悬空。线色对应如下：</p>\n<p>红 - 左声道；绿 - 右声道；蓝 - 接地。</p>\n<p><img src=\"/images/2022-06-03/02.JPG\" alt=\"屏蔽线\"></p>\n<p>可以预先套上一段热缩管。</p>\n<p><img src=\"/images/2022-06-03/03.JPG\" alt=\"热缩管\"></p>\n<p>取一枚 3.5mm 公头，旋下插头。</p>\n<p>最长的一段一般是接地。若将接地朝下，我这款公头左侧为左声道，右侧为右声道。具体的接线方式可以用万用表测量接头和接口得知。</p>\n<p>将线穿入孔中，上一坨焊锡即可。</p>\n<p><img src=\"/images/2022-06-03/04.JPG\" alt=\"公头焊接\"></p>\n<p>再使用万用表测量接头与线末端的连通性，注意不能与其他线短路了。</p>\n<p>确认无误后可以打上热熔胶固定。</p>\n<p><img src=\"/images/2022-06-03/05.JPG\" alt=\"热熔胶固定\"></p>\n<p>再打点热熔胶，旋回外壳，将热缩管套好，加热热缩管使其收缩。</p>\n<p>3.5mm 线缆就制作完成了。</p>\n<h4 id=\"驱动板焊接\"><a href=\"#驱动板焊接\" class=\"headerlink\" title=\"驱动板焊接\"></a>驱动板焊接</h4><p>驱动板上有三组线需要焊接：</p>\n<ul>\n<li>音频输入线（3.5mm 线缆）</li>\n<li>电源输入线（Type C 线）</li>\n<li>音频输出线（喇叭线）</li>\n</ul>\n<p>Type C 线我没有再用屏蔽线，用两根导线连接 Type C 母头和驱动板即可。</p>\n<p>焊接方法就不多说了，线穿过孔，上锡即可。</p>\n<p><img src=\"/images/2022-06-03/06.JPG\" alt=\"焊接中的驱动板\"></p>\n<p>全部线缆焊接完成如下：</p>\n<p><img src=\"/images/2022-06-03/07.JPG\" alt=\"焊接完的驱动板\"></p>\n<h4 id=\"热熔胶填充\"><a href=\"#热熔胶填充\" class=\"headerlink\" title=\"热熔胶填充\"></a>热熔胶填充</h4><p>完成接线后，确认无短路，即可连接电脑测试音箱。</p>\n<p>若没有问题，考虑到需要长期使用，就可以用热熔胶覆盖焊接处，防止焊点脱落。</p>\n<p>用热熔胶覆盖之后的驱动板：</p>\n<p><img src=\"/images/2022-06-03/08.JPG\" alt=\"热熔胶覆盖的驱动板\"></p>\n<p>嘛…手艺不是很行。</p>\n<hr>\n<p>就此，外接音箱组装完成啦！</p>\n",
            "tags": [
                "教程",
                "DIY"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/2e528779.html",
            "url": "https://blog.udon.eu.org/archives/2e528779.html",
            "title": "迁移 Hexo 渲染环境至 GitHub Actions",
            "date_published": "2022-05-23T11:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本博客使用的是 Hexo 静态博客框架，我将渲染环境搭建在家中 NAS 之上，部署了一个 Ubuntu Docker 并安装好了 Node.js 环境，正常使用了一两年。</p>\n<p>上周末，写完新文章的我心血来潮，打算在更新博客的时候顺便更新一下老旧的 Node 和 Hexo（Node 12, Hexo 5.2）。</p>\n<p>一番折腾之后，以 npm 和 hexo 环境全部被破坏（事后想想也许只是环境变量掉了）的下场结束。</p>\n<p>鉴于 NAS 性能低下，更新一次 node module 都需要 30 分钟，我放弃了在 NAS 上重新部署渲染环境的念头，转而使用 GitHub Actions 渲染，并同时部署于 GitHub Pages 与 CloudFlare Pages。</p>\n<h2 id=\"将渲染环境迁至-GitHub-Actions\"><a href=\"#将渲染环境迁至-GitHub-Actions\" class=\"headerlink\" title=\"将渲染环境迁至 GitHub Actions\"></a>将渲染环境迁至 GitHub Actions</h2><p>不久之前，CloudFlare Pages 悄悄下架了 Hexo 框架的部署功能，只能用 GitHub Actions 渲染，然后再部署至 CloudFlare Pages 了。</p>\n<h3 id=\"项目结构的修改\"><a href=\"#项目结构的修改\" class=\"headerlink\" title=\"项目结构的修改\"></a>项目结构的修改</h3><p>若想使用 GitHub Actions，需要将博客的源码上传至 GitHub。考虑到隐私和安全的问题，建议创建一个私有仓库管理源码。</p>\n<p>对于项目没有什么需要修改的，因为 Actions 渲染的流程和本地渲染的流程没有区别。</p>\n<p>唯一需要改动的，是引入的主题。由于两个 Git 仓库不能嵌套，我们需要以 Git submodule 的形式引入主题仓库。</p>\n<p>我使用的是 Fluid 主题。采用 <a href=\"https://hexo.fluid-dev.com/docs/guide/#%E8%A6%86%E7%9B%96%E9%85%8D%E7%BD%AE\">覆盖配置</a> 的方法，即在根目录之下有一份配置会覆盖主题内的配置文件，便于在 Actions 中渲染。</p>\n<p>以下也将以 Fluid 为例，请根据你使用的主题修改命令或代码。</p>\n<p>首先，删除原来的主题（若使用的是主题内的配置，注意备份配置文件！）</p>\n<p>返回博客源码的根目录，执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git submodule add https://github.com/fluid-dev/hexo-theme-fluid.git themes/fluid<br></code></pre></td></tr></table></figure>\n\n<p>末尾的 <code>themes/fluid</code> 为此 submodule 在项目中的位置与名字，与先前本地渲染时的配置相同即可。</p>\n<p>删除子模块的过程较为繁琐，请参考网上的文章进行操作。</p>\n<p>在 Clone 此项目时，submodule 默认不会被下载，需要使用指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git submodule update --init --recursive<br></code></pre></td></tr></table></figure>\n\n<p>下载 submodule。在下面会提到的 Actions 配置文件中会出现这条指令。</p>\n<p>接着，就可以将博客源码上传至 GitHub。</p>\n<h3 id=\"GitHub-Actions-相关文件\"><a href=\"#GitHub-Actions-相关文件\" class=\"headerlink\" title=\"GitHub Actions 相关文件\"></a>GitHub Actions 相关文件</h3><p>在博客源码根目录创建 <code>.github/workflows/submit.yml</code> 和 <code>.github/script/blog-update.sh</code> 两个文件，填入下列代码。</p>\n<p>以下代码参考文章 <a href=\"https://blog.kukmoon.com/f8bb4ee.html#23-%E7%BC%96%E5%86%99-workflow\">GitHub Actions 自动部署 Hexo 博客到 cPanel 虚拟主机 - 谷中望月</a>，有所修改。</p>\n<p><code>submit.yml</code>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">CI</span><br><br><span class=\"hljs-comment\"># 监听 main 分支的改动与 Release 的发布</span><br><span class=\"hljs-attr\">on:</span><br>  <span class=\"hljs-attr\">push:</span><br>    <span class=\"hljs-attr\">branches:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">main</span><br>  <span class=\"hljs-attr\">release:</span><br>    <span class=\"hljs-attr\">types:</span> [<span class=\"hljs-string\">published</span>]<br><br><span class=\"hljs-comment\"># 自定义环境变量</span><br><span class=\"hljs-attr\">env:</span><br>  <span class=\"hljs-attr\">GIT_USER:</span> <span class=\"hljs-string\">Lao-Liu233</span>  <span class=\"hljs-comment\"># 改成你自己的 GitHub 用户名</span><br>  <span class=\"hljs-attr\">GIT_EMAIL:</span> <span class=\"hljs-string\">blog@udon.eu.org</span>  <span class=\"hljs-comment\"># 改成你自己的 GitHub 注册邮箱</span><br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">build:</span><br>    <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">on</span> <span class=\"hljs-string\">node</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.os</span> <span class=\"hljs-string\">&#125;&#125;</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">strategy:</span><br>      <span class=\"hljs-attr\">matrix:</span><br>        <span class=\"hljs-attr\">os:</span> [<span class=\"hljs-string\">ubuntu-latest</span>]<br>        <span class=\"hljs-attr\">node_version:</span> [<span class=\"hljs-number\">16.15</span>]  <span class=\"hljs-comment\"># 改成你本地的 Node.js 版本，可以用 `node --version` 命令查询</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-comment\"># 获取博客源码</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Checkout</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br>      <br>      <span class=\"hljs-comment\"># 用 Node.js 渲染</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Use</span> <span class=\"hljs-string\">Node.js</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-node@v1</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">node-version:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">matrix.node_version</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-comment\"># 安装 Hexo-cli    </span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">hexo</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          npm install -g hexo-cli</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-comment\"># 安装依赖</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Install</span> <span class=\"hljs-string\">dependencies</span>    <br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          npm install</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-comment\"># 导入 submodule</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Clone</span> <span class=\"hljs-string\">submodule</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          git submodule update --init --recursive</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-comment\"># 配置环境</span><br>      <span class=\"hljs-comment\"># ssh-kenscan github.com &gt;&gt; ~/.ssh/known_hosts   # 从 GitHub 获取公钥并保存到 known_hosts 文件</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Configuration</span> <span class=\"hljs-string\">environment</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</span><br><span class=\"hljs-string\">          mkdir -p ~/.ssh/</span><br><span class=\"hljs-string\">          echo &quot;$HEXO_DEPLOY_PRI&quot; &gt; ~/.ssh/id_rsa</span><br><span class=\"hljs-string\">          chmod 600 ~/.ssh/id_rsa</span><br><span class=\"hljs-string\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span><br><span class=\"hljs-string\">          git config --global user.name $GIT_USER</span><br><span class=\"hljs-string\">          git config --global user.email $GIT_EMAIL</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-comment\"># 生成并部署</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Deploy</span> <span class=\"hljs-string\">hexo</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          hexo clean</span><br><span class=\"hljs-string\">          hexo g -d</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-comment\"># 部署后更新博客源码，用于添加 abbrlink，如果不用 abbrlink，需要删除</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Update</span> <span class=\"hljs-string\">Blog</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br>          <span class=\"hljs-string\">sh</span> <span class=\"hljs-string\">&quot;$&#123;GITHUB_WORKSPACE&#125;/.github/script/blog-update.sh&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p><code>.github/script/blog-update.sh</code>:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/bin/sh</span><br><br><span class=\"hljs-keyword\">if</span> [ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(git status --porcelain)</span>&quot;</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;nothing to update.&quot;</span><br><span class=\"hljs-keyword\">else</span><br>    git add <span class=\"hljs-built_in\">source</span>/_posts/\t<span class=\"hljs-comment\">#仅对文章源码所在文件夹进行修改</span><br>    git commit -m <span class=\"hljs-string\">&quot;triggle by commit <span class=\"hljs-variable\">$&#123;GITHUB_SHA&#125;</span>&quot;</span> -a<br>    git push origin main<br><span class=\"hljs-keyword\">fi</span><br></code></pre></td></tr></table></figure>\n\n<p>Commit + Push，打开 Actions 界面，就能看到正在运行的 Action 啦。</p>\n<p>不出意外，Action 成功执行，1分钟内博客就能渲染成功、部署至 GitHub Pages。</p>\n<h2 id=\"同时部署至-CloudFlare-Pages\"><a href=\"#同时部署至-CloudFlare-Pages\" class=\"headerlink\" title=\"同时部署至 CloudFlare Pages\"></a>同时部署至 CloudFlare Pages</h2><p>步骤较为简单，我简述一下。</p>\n<p>打开 CloudFlare Pages， 连接至存放 <strong>渲染后</strong> 的静态文件的仓库，渲染的框架选择 <strong>None</strong>，执行的指令填写 <code>exit 0;</code> 就可以了。</p>\n<p>执行部署后，渲染后的静态文件就被部署至 CloudFlare Pages 啦。</p>\n",
            "tags": [
                "教程",
                "GitHub Actions",
                "Hexo"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/dbf21067.html",
            "url": "https://blog.udon.eu.org/archives/dbf21067.html",
            "title": "玩一玩 DN42",
            "date_published": "2022-04-01T04:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>两个月前，我向 DN42 提交了申请，并于4个小时后通过了审核，获得了自己的 AS 和 IP。</p>\n<p>作此文分享一下把玩 DN42 的心得，也作为我的备忘录。</p>\n<h2 id=\"我的信息\"><a href=\"#我的信息\" class=\"headerlink\" title=\"我的信息\"></a>我的信息</h2><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">AS4242423490<br>IPv4: <span class=\"hljs-number\">172.23</span><span class=\"hljs-number\">.13</span><span class=\"hljs-number\">.64</span>/<span class=\"hljs-number\">28</span><br>IPv6: fd44:<span class=\"hljs-number\">6b93</span>:4eaa::/<span class=\"hljs-number\">48</span><br></code></pre></td></tr></table></figure>\n\n<p>目前仅一个洛杉矶节点开放 Peer，后期还将添加韩国和日本的节点。</p>\n<h2 id=\"如何把玩\"><a href=\"#如何把玩\" class=\"headerlink\" title=\"如何把玩\"></a>如何把玩</h2><h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>有关注册的文章很多，推荐这两篇：</p>\n<p><a href=\"https://lantian.pub/article/modify-website/dn42-experimental-network-2020.lantian/\">DN42 实验网络介绍及注册教程（2022-02 更新） | Lan Tian @ Blog</a></p>\n<p><a href=\"https://blog.baoshuo.ren/post/dn42-network/#\">初探 DN42 网络 - 宝硕博客 (baoshuo.ren)</a></p>\n<p>需要使用 Git 和 PGP，在 DN42 的 Git 仓库提交你的个人信息即可完成注册。</p>\n<h3 id=\"搭建内网\"><a href=\"#搭建内网\" class=\"headerlink\" title=\"搭建内网\"></a>搭建内网</h3><p>在和其他 AS 建立对等连接之前，我们先要把内网整理好：</p>\n<p>各台服务器的地理位置和网络位置各不相同，需要使用 VPN 创建虚拟局域网。</p>\n<p>课堂上讲了两种内网路由协议：</p>\n<ul>\n<li><p>RIP 是“真”内网用的，不适用于这种物理位置距离较远（路由跳数多）的虚拟内网；</p>\n</li>\n<li><p>可以使用 OSPF，但我在配置的时候遇到了不少问题，因此也不建议你使用。</p>\n</li>\n</ul>\n<p>有一位老朋友可以轻松解决以上两个问题：<strong>Zerotier</strong>。</p>\n<p>Zerotier 的虚拟网络可以使用自己的 IP，只需在 <strong>Managed Routes</strong> 中设置你在 DN42 申请的 IPv4 和 IPv6，即可为每台加入虚拟网络的主机自动或手动配置 DN42 IP。</p>\n<p>在机器之间使用 DN42 IP 互 ping 测试连通性。</p>\n<h3 id=\"准备-BGP-相关软件\"><a href=\"#准备-BGP-相关软件\" class=\"headerlink\" title=\"准备 BGP 相关软件\"></a>准备 BGP 相关软件</h3><p>搭建好内网之后，就可以开始配置 BGP 发言人啦。</p>\n<p>选择一台或多台服务器，作为自治域向外宣告路由的发言人。</p>\n<p>在每台服务器上都需要配置 BGP 相关的软件，以及和其他 BGP 发言人建立连接（一般是 VPN 连接）的软件。</p>\n<p>目前在 DN42 网络用的比较多的 VPN 软件是 Wireguard，BGP 软件则可以从 bird 2、bird 1、quagga 等软件中选择。</p>\n<p>我使用的是 bird 2。</p>\n<h4 id=\"安装与配置-BIRD-2\"><a href=\"#安装与配置-BIRD-2\" class=\"headerlink\" title=\"安装与配置 BIRD 2\"></a>安装与配置 BIRD 2</h4><p>安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">apt update<br>apt install bird2 -y<br></code></pre></td></tr></table></figure>\n\n<p>bird 2 的配置文件位于 <code>/etc/bird</code>，名为 <code>bird.conf</code>。</p>\n<p>配置文件可以参考（<del>照抄</del>）DN42 官方给出的配置：<a href=\"https://dn42.dev/howto/Bird2#example-configuration\">howto&#x2F;Bird2 (dn42.dev)</a></p>\n<p>喂到嘴边的配置方法：</p>\n<ul>\n<li>将官方配置填入 <code>/etc/bird/bird.conf</code></li>\n<li>在 <code>/etc/bird</code> 目录下新建名为 <code>peers</code> 的文件夹</li>\n<li>下载 ROA 配置（命令来自<a href=\"https://blog.baoshuo.ren/\">宝硕的博客</a>）</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wget -4 -O /tmp/dn42_roa.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf &amp;&amp; <span class=\"hljs-built_in\">mv</span> -f /tmp/dn42_roa.conf /etc/bird/dn42_roa.conf<br>wget -4 -O /tmp/dn42_roa_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf &amp;&amp; <span class=\"hljs-built_in\">mv</span> -f /tmp/dn42_roa_v6.conf /etc/bird/dn42_roa_v6.conf<br></code></pre></td></tr></table></figure>\n\n<p>​\t并配置 crontab，每小时自动下载并重载新配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">0 */1 * * * wget -4 -O /tmp/dn42_roa.conf https://dn42.burble.com/roa/dn42_roa_bird2_4.conf &amp;&amp; <span class=\"hljs-built_in\">mv</span> -f /tmp/dn42_roa.conf /etc/bird/dn42_roa.conf<br>0 */1 * * * wget -4 -O /tmp/dn42_roa_v6.conf https://dn42.burble.com/roa/dn42_roa_bird2_6.conf &amp;&amp; <span class=\"hljs-built_in\">mv</span> -f /tmp/dn42_roa_v6.conf /etc/bird/dn42_roa_v6.conf<br>0 */1 * * * birdc configure<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装并配置-Wireguard\"><a href=\"#安装并配置-Wireguard\" class=\"headerlink\" title=\"安装并配置 Wireguard\"></a>安装并配置 Wireguard</h4><p>安装命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">apt update<br>apt install wireguard -y<br></code></pre></td></tr></table></figure>\n\n<p>这样就安装了 <code>Wireguard</code> 和名为 <code>wg-quick</code> 的管理工具。</p>\n<p>使用命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">wg genkey | <span class=\"hljs-built_in\">tee</span> privatekey | wg pubkey &gt; publickey<br></code></pre></td></tr></table></figure>\n\n<p>在当前目录下创建 Wireguard 建立连接所用的密钥对（公钥和私钥）。</p>\n<p>就此 Wireguard 安装完成。</p>\n<h4 id=\"配置系统内核\"><a href=\"#配置系统内核\" class=\"headerlink\" title=\"配置系统内核\"></a>配置系统内核</h4><p>打开内核的数据包转发功能：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;net.ipv4.ip_forward=1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;net.ipv6.conf.default.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;net.ipv6.conf.all.forwarding=1&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure>\n\n<p>关闭内核 <code>rp_filter</code> 的严格模式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;net.ipv4.conf.default.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf<br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;net.ipv4.conf.all.rp_filter=0&quot;</span> &gt;&gt; /etc/sysctl.conf<br>sysctl -p<br></code></pre></td></tr></table></figure>\n\n<p>如果有 ufw 等防火墙自动配置工具，务必关闭。</p>\n<p>p.s. 我拿到任何机器后会立刻执行的指令是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">sudo</span> ufw <span class=\"hljs-built_in\">disable</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"创建-Dummy-网卡\"><a href=\"#创建-Dummy-网卡\" class=\"headerlink\" title=\"创建 Dummy 网卡\"></a>创建 Dummy 网卡</h4><p>dummy 网卡具体的作用我不是很清楚…</p>\n<p>只知道如果要用链路本地地址进行通讯，要把 DN42 的 IP 地址绑定到 dummy 网卡上。</p>\n<p>dummy 网卡配置指令如下：（[ ] 中为需要你填写的内容）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">ip <span class=\"hljs-built_in\">link</span> del dummy<br>ip <span class=\"hljs-built_in\">link</span> add dummy <span class=\"hljs-built_in\">type</span> dummy<br>ip addr add [你的 DN42 IPv4 地址]/32 dev dummy<br>ip addr add [你的 DN42 IPv6 地址]/128 dev dummy<br>ip <span class=\"hljs-built_in\">link</span> <span class=\"hljs-built_in\">set</span> dummy up<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"和小伙伴建立对等连接（peer）\"><a href=\"#和小伙伴建立对等连接（peer）\" class=\"headerlink\" title=\"和小伙伴建立对等连接（peer）\"></a>和小伙伴建立对等连接（peer）</h3><h4 id=\"需要和对方分享的\"><a href=\"#需要和对方分享的\" class=\"headerlink\" title=\"需要和对方分享的\"></a>需要和对方分享的</h4><ul>\n<li>你的 DN42 信息，包括 AS 号和发言人的 DN42 IPv4（IPv6）地址；</li>\n<li>若使用链路本地地址，还需提供这东西，一般为一个本地 IPv6 地址，常取 <code>fe80::[你的 AS 号后4位]</code>；</li>\n<li>发言人的外网 IPv4 地址（或域名）和 Wireguard 隧道的通讯端口；</li>\n<li>Wireguard 公钥。</li>\n</ul>\n<p>有一些信息会在以下的配置中获得。</p>\n<h4 id=\"Wireguard-相关的\"><a href=\"#Wireguard-相关的\" class=\"headerlink\" title=\"Wireguard 相关的\"></a>Wireguard 相关的</h4><p>在 <code>/etc/wireguard</code> 目录下创建 Wireguard 配置文件，每一个配置文件对应着一个 Wireguard 隧道。</p>\n<p>例如你要和 AS114514 <del>臭</del> 建立对等连接，可以在 <code>peers</code> 文件夹下新建一个名为 <code>wg_114514.conf</code> （文件名即为 wireguard 隧道名）的配置文件。</p>\n<p>配置的模板如下：（[ ] 中为需要你填写的内容）</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[Interface]</span><br><span class=\"hljs-attr\">Table</span> = <span class=\"hljs-literal\">off</span><br><span class=\"hljs-attr\">ListenPort</span> = [我们的监听端口，可以用对方 AS 号的后五位]<br><span class=\"hljs-attr\">PrivateKey</span> = [刚刚生成的 Wireguard 私钥]<br><span class=\"hljs-attr\">PostUp</span> = ip addr add [本机的 DN42 IPv4 地址]/<span class=\"hljs-number\">32</span> peer [对方机器的 DN42 IPv4 地址]/<span class=\"hljs-number\">32</span> dev %i<br><span class=\"hljs-attr\">PostUp</span> = ip addr add [本机的链路本地地址（见 BIRD 相关配置）]/<span class=\"hljs-number\">64</span> dev %i<br><br><span class=\"hljs-section\">[Peer]</span><br><span class=\"hljs-attr\">PublicKey</span> = [对方的 Wireguard 公钥]<br><span class=\"hljs-attr\">AllowedIPs</span> = <span class=\"hljs-number\">10.0</span>.<span class=\"hljs-number\">0.0</span>/<span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">172.20</span>.<span class=\"hljs-number\">0.0</span>/<span class=\"hljs-number\">14</span>, <span class=\"hljs-number\">172.31</span>.<span class=\"hljs-number\">0.0</span>/<span class=\"hljs-number\">16</span>, fd00::/<span class=\"hljs-number\">8</span>, fe80::/<span class=\"hljs-number\">64</span><br><span class=\"hljs-attr\">Endpoint</span> = [对方机器的公网 IP 地址或域名 : 端口号]<br></code></pre></td></tr></table></figure>\n\n<p>然后使用 <code>wg-quick up [wireguard 隧道名（刚刚的配置文件名）]</code> 启动 Wireguard 隧道。</p>\n<p>可以 ping 一下对方的 DN42 IP 看看 Wireguard 隧道是否连接成功。</p>\n<p>使用 <code>wg</code> 命令查看各隧道的连接情况。若有显示 <code>last handshake</code>，一般情况下隧道就已成功建立。</p>\n<h4 id=\"BIRD-相关的\"><a href=\"#BIRD-相关的\" class=\"headerlink\" title=\"BIRD 相关的\"></a>BIRD 相关的</h4><p>在先前导入的 bird 2 配置中定义了一个 <code>peers</code> 文件夹，就是用来存放 peer 相关的配置。</p>\n<p>例如你要和 AS114514 <del>又臭</del> 建立对等连接，可以在 <code>peers</code> 文件夹下新建一个名为 <code>114514.conf</code> （文件名可自定义）的配置文件。</p>\n<p>我采用的是<a href=\"https://zh.wikipedia.org/wiki/%E9%93%BE%E8%B7%AF%E6%9C%AC%E5%9C%B0%E5%9C%B0%E5%9D%80\">链路本地地址（Link-Local）</a>的配置方法。配置的模板如下：（[ ] 中为需要你填写的内容）</p>\n<figure class=\"highlight inform7\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs inform7\">protocol bgp <span class=\"hljs-comment\">[peer的名字]</span> from dnpeers &#123;<br>    neighbor <span class=\"hljs-comment\">[对方的链路本地地址]</span> % &#x27;<span class=\"hljs-comment\">[通向对方的 Wiregurad 隧道名]</span>&#x27; as <span class=\"hljs-comment\">[对方的 AS 号]</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>添加完配置之后别忘了用 <code>birdc configure</code> 重载 bird 2 配置。</p>\n<p>使用命令 <code>birdc s p</code> 可以查看 BIRD 2 软件下所有协议的通信情况。</p>\n<p>若显示为：</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">dn42_xxxx</span>   BGP    ---    up    <span class=\"hljs-number\">20</span>:<span class=\"hljs-number\">36</span>:<span class=\"hljs-number\">30</span>.<span class=\"hljs-number\">984</span>   Established<br></code></pre></td></tr></table></figure>\n\n<p>则表示 BGP 连接已建立。</p>\n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2><p>我还在写 DN42 相关的站点，在上面分享节点信息，方便大家 peer。</p>\n<p>但目前进度缓慢（悲）。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/9b58c98e.html",
            "url": "https://blog.udon.eu.org/archives/9b58c98e.html",
            "title": "合宙 EPS32-C3 把玩记录（二）：WiFi 与一个 Web 程序",
            "date_published": "2022-03-26T16:15:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"了解一下相关的库\"><a href=\"#了解一下相关的库\" class=\"headerlink\" title=\"了解一下相关的库\"></a>了解一下相关的库</h2><ul>\n<li><h3 id=\"串口通信\"><a href=\"#串口通信\" class=\"headerlink\" title=\"串口通信\"></a>串口通信</h3></li>\n</ul>\n<p>这个库是自带的，不需要引入。</p>\n<p>据我的理解，单片机的串口就是控制台程序的控制台，可以返回一些信息给上位机。</p>\n<p>会用到的几个指令：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">Serial.begin(Baudrate);\t<span class=\"hljs-comment\">//参数为串口通信的波特率</span><br>Serial.end();<br>Serial.read();\t\t\t<span class=\"hljs-comment\">//读取串口收到数据的第一个字节</span><br>Serial.peek();\t\t\t<span class=\"hljs-comment\">//读取串口数据中下一字节的内容</span><br>Serial.flush();\t\t\t<span class=\"hljs-comment\">//清空缓冲区</span><br>Serial.print/println();\t<span class=\"hljs-comment\">//不用多说</span><br>Serial.write();\t\t\t<span class=\"hljs-comment\">//写二进制数据</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><h3 id=\"WiFi-h\"><a href=\"#WiFi-h\" class=\"headerlink\" title=\"WiFi.h\"></a>WiFi.h</h3></li>\n</ul>\n<p><code>#include &lt;WiFi.h&gt;</code></p>\n<h4 id=\"AP（接入点）-Mode\"><a href=\"#AP（接入点）-Mode\" class=\"headerlink\" title=\"AP（接入点） Mode\"></a>AP（接入点） Mode</h4><p>创建一个接入点。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">WiFi.mode(WiFi_AP);\t\t\t<span class=\"hljs-comment\">//设置工作在 AP 模式</span><br>WiFi.softAPConfig(local_IP, gateway, subnet);<br><span class=\"hljs-comment\">//定义本机 IP（这个不大确定）、网关 IP 和子网掩码</span><br><span class=\"hljs-comment\">//IPAddress 数据类型格式：IPAddress local_IP(192,168,4,22);</span><br>WiFi.softAP(SSID,PASSWD);\t<span class=\"hljs-comment\">//启动 AP，参数不多解释,返回 bool </span><br></code></pre></td></tr></table></figure>\n\n<p>更多函数见 <a href=\"https://blog.csdn.net/Naisu_kun/article/details/86165403#_28\">WiFi.h AP 常用方法说明</a></p>\n<h4 id=\"STA（站点）-Mode\"><a href=\"#STA（站点）-Mode\" class=\"headerlink\" title=\"STA（站点） Mode\"></a>STA（站点） Mode</h4><p>接入一个 AP。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\">WiFi.mode(WIFI_STA); \t\t<span class=\"hljs-comment\">//设置工作在 STA 模式</span><br>WiFi.start(SSID,PASSWD)\t\t<span class=\"hljs-comment\">//连接至 AP，参数不多解释</span><br>Serial.println(WiFi.localIP());\t\t<span class=\"hljs-comment\">//打印本机 IP，省的去路由器管理界面看</span><br></code></pre></td></tr></table></figure>\n\n<p>更多函数见 <a href=\"https://blog.csdn.net/Naisu_kun/article/details/86165403#_130\">WiFi.h STA 常用方法说明</a></p>\n<ul>\n<li><h2 id=\"WebServer-h\"><a href=\"#WebServer-h\" class=\"headerlink\" title=\"WebServer.h\"></a>WebServer.h</h2></li>\n</ul>\n<p><code>#include &lt;WebServer.h&gt;</code></p>\n<p>创建一个简单的网站服务器。真的很简单。</p>\n<p>一个个函数讲有点难理解，我放在这节的例程里面说明。</p>\n<h2 id=\"写一个测试程序吧\"><a href=\"#写一个测试程序吧\" class=\"headerlink\" title=\"写一个测试程序吧\"></a>写一个测试程序吧</h2><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;WiFi.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;WebServer.h&gt;</span></span><br><span class=\"hljs-comment\">//引入所需要的两个库</span><br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *SSID = <span class=\"hljs-string\">&quot;YOUR_SSID&quot;</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *PASSWORD = <span class=\"hljs-string\">&quot;YOUR_PASSWORD&quot;</span>;<br><br>WebServer <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(<span class=\"hljs-number\">80</span>)</span>;\t\t<span class=\"hljs-comment\">//网站服务器将运行在 80 端口</span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handleIndex</span><span class=\"hljs-params\">()</span>\t\t\t<span class=\"hljs-comment\">//收到 HTTP 请求的回调函数</span><br>&#123;<br>    server.send(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/plain&quot;</span>, <span class=\"hljs-string\">&quot;Hello from ESP32!&quot;</span>);<br>    <span class=\"hljs-comment\">//发送 HTTP 相应，内容分别为：状态码，Content-Type，响应体</span><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">setup</span><span class=\"hljs-params\">()</span><br>&#123;<br>    Serial.begin(<span class=\"hljs-number\">9600</span>);\t\t<span class=\"hljs-comment\">//开启串口，波特率设置为 9600</span><br>    Serial.println();<br><br>    WiFi.mode(WIFI_STA);\t<span class=\"hljs-comment\">//设置工作在 STA 模式</span><br>    WiFi.begin(SSID, PASSWORD);\t\t\t\t<span class=\"hljs-comment\">//连接至指定 AP</span><br>    <span class=\"hljs-keyword\">while</span> (WiFi.status() != WL_CONNECTED) \t<span class=\"hljs-comment\">//等待网络连接成功</span><br>    &#123;<br>        delay(<span class=\"hljs-number\">500</span>);<br>        Serial.print(<span class=\"hljs-string\">&quot;.&quot;</span>);\t<span class=\"hljs-comment\">//将连接信息输出至串口</span><br>    &#125;<br>    Serial.println(<span class=\"hljs-string\">&quot;WiFi connected!&quot;</span>);<br><br>    Serial.println(<span class=\"hljs-string\">&quot;IP address: &quot;</span>);<br>    Serial.println(WiFi.localIP()); \t\t<span class=\"hljs-comment\">//打印本机 IP</span><br><br>    server.on(<span class=\"hljs-string\">&quot;/&quot;</span>, handleIndex);\t\t\t<span class=\"hljs-comment\">//注册链接（类似与注册一个路由），并选择回调函数</span><br>    <span class=\"hljs-comment\">//同样的，还可以注册别的链接，如</span><br>    <span class=\"hljs-comment\">//server.on(&quot;/test&quot;, handleIndexTest);</span><br>  <br>    server.begin();\t\t\t<span class=\"hljs-comment\">//开启 HTTP 服务器</span><br>    Serial.println(<span class=\"hljs-string\">&quot;WebServer begin!&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">loop</span><span class=\"hljs-params\">()</span><br>&#123;<br>    server.handleClient();\t<span class=\"hljs-comment\">//不断相应 HTTP 请求</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>访问串口返回的 IP，即可看到 <code>Hello from ESP32!</code> 这句话啦。</p>\n<h2 id=\"还有个-Web-Server-叫-ESPAsyncWebServer\"><a href=\"#还有个-Web-Server-叫-ESPAsyncWebServer\" class=\"headerlink\" title=\"还有个 Web Server 叫 ESPAsyncWebServer\"></a>还有个 Web Server 叫 ESPAsyncWebServer</h2><p>自带的 WebServer 是同步的，只支持处理一个连接。对于这种体量的机器其实足够了。</p>\n<p>顺便学习一下一个第三方库吧。</p>\n<h3 id=\"添加库\"><a href=\"#添加库\" class=\"headerlink\" title=\"添加库\"></a>添加库</h3><p>对于这款 ESP32，需要下载并导入两个库（源码 ZIP 即可）：</p>\n<p><a href=\"https://github.com/me-no-dev/AsyncTCP\">me-no-dev&#x2F;AsyncTCP: Async TCP Library for ESP32</a></p>\n<p><a href=\"https://github.com/me-no-dev/ESPAsyncWebServer\">me-no-dev&#x2F;ESPAsyncWebServer: Async Web Server for ESP8266 and ESP32</a></p>\n<p>在 Arduino 的<code>项目 &gt; 加载库 &gt; 添加 .ZIP 库</code>中导入这两个库。</p>\n<h3 id=\"用-ESPAsyncWebServer-重写刚刚的例程吧\"><a href=\"#用-ESPAsyncWebServer-重写刚刚的例程吧\" class=\"headerlink\" title=\"用 ESPAsyncWebServer 重写刚刚的例程吧\"></a>用 ESPAsyncWebServer 重写刚刚的例程吧</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;WiFi.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;ESPAsyncWebServer.h&gt;</span></span><br><span class=\"hljs-comment\">//注意替换为新的库</span><br><br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *SSID = <span class=\"hljs-string\">&quot;YOUR_SSID&quot;</span>;<br><span class=\"hljs-type\">const</span> <span class=\"hljs-type\">char</span> *PASSWORD = <span class=\"hljs-string\">&quot;YOUR_PASSWORD&quot;</span>;<br><br>ESPAsyncWebServer <span class=\"hljs-title function_\">server</span><span class=\"hljs-params\">(<span class=\"hljs-number\">80</span>)</span>;\t\t        <span class=\"hljs-comment\">//同样替换为新的对象</span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">handleIndex</span><span class=\"hljs-params\">(AsyncWebServerRequest *request)</span>        <span class=\"hljs-comment\">//回调函数有更改</span><br>&#123;<br>    request-&gt;send(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;text/plain&quot;</span>, <span class=\"hljs-string\">&quot;Hello, world!&quot;</span>);<br>    <span class=\"hljs-comment\">//发送 HTTP 相应，内容相同</span><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">setup</span><span class=\"hljs-params\">()</span><br>&#123;<br>    Serial.begin(<span class=\"hljs-number\">9600</span>);\t\t<span class=\"hljs-comment\">//开启串口，波特率设置为 9600</span><br>    Serial.println();<br><br>    WiFi.mode(WIFI_STA);\t<span class=\"hljs-comment\">//设置工作在 STA 模式</span><br>    WiFi.begin(SSID, PASSWORD);\t\t\t\t<span class=\"hljs-comment\">//连接至指定 AP</span><br>    <span class=\"hljs-keyword\">while</span> (WiFi.status() != WL_CONNECTED) \t<span class=\"hljs-comment\">//等待网络连接成功</span><br>    &#123;<br>        delay(<span class=\"hljs-number\">500</span>);<br>        Serial.print(<span class=\"hljs-string\">&quot;.&quot;</span>);\t<span class=\"hljs-comment\">//将连接信息输出至串口</span><br>    &#125;<br>    Serial.println(<span class=\"hljs-string\">&quot;WiFi connected!&quot;</span>);<br><br>    Serial.println(<span class=\"hljs-string\">&quot;IP address: &quot;</span>);<br>    Serial.println(WiFi.localIP()); \t\t<span class=\"hljs-comment\">//打印本机 IP</span><br><br>    server.on(<span class=\"hljs-string\">&quot;/&quot;</span>, handleIndex);\t\t\t<span class=\"hljs-comment\">//注册链接（类似与注册一个路由），并选择回调函数</span><br>    <span class=\"hljs-comment\">//同样的，还可以注册别的链接，如</span><br>    <span class=\"hljs-comment\">//server.on(&quot;/test&quot;, handleIndexTest);</span><br>  <br>    server.begin();\t\t\t<span class=\"hljs-comment\">//开启 HTTP 服务器</span><br>    Serial.println(<span class=\"hljs-string\">&quot;WebServer begin!&quot;</span>);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">loop</span><span class=\"hljs-params\">()</span><br>&#123;<br><span class=\"hljs-comment\">//不用在这儿监听 HTTP 请求了</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>理论上来讲，上面的代码应该是正确的……</p>\n<p>但 Arduino 在编译的时候报错，内容是 ESPAsyncWebServer 库中的某些代码。</p>\n<p>有待我弄清楚出错的原因。</p>\n",
            "tags": [
                "教程",
                "嵌入式开发"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/7f7bd4a5.html",
            "url": "https://blog.udon.eu.org/archives/7f7bd4a5.html",
            "title": "合宙 EPS32-C3 把玩记录（一）：环境搭建与第一个程序",
            "date_published": "2022-03-26T09:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>为了贯彻本博客最重要的关键词：<strong>性价比</strong>，我看到性价如此高的开发板，想都没想就剁手了。</p>\n<p>嘛其实也没有这么冲动，我在购买 3D 打印机之后就一直在计划着做一些网上现成的电子项目，但碍于这段时间 MCU 和大尺寸屏幕价格的飙升，一直没能开始动手。</p>\n<p>正好最近我学习了 iPad 上的 3D 建模软件 Sharp3D，项目的外壳建模变得有可能；又遇到了这块便宜的板子，立即开工！</p>\n<p>因为1.8寸的 TFT 显示屏还没到货，3D 建模就先放一边，先来研究一下这块开发板。</p>\n<h3 id=\"事先声明\"><a href=\"#事先声明\" class=\"headerlink\" title=\"事先声明\"></a>事先声明</h3><p>本教程是我一边从零开始学习嵌入式开发一边作成的，有逻辑混乱、内容浅显和成吨的错误，还请已经熟悉嵌入式开发的大佬多多包涵与斧正）</p>\n<h2 id=\"问题：什么？开发环境不是按语言分的嘛？\"><a href=\"#问题：什么？开发环境不是按语言分的嘛？\" class=\"headerlink\" title=\"问题：什么？开发环境不是按语言分的嘛？\"></a>问题：什么？开发环境不是按语言分的嘛？</h2><p>在开始学习嵌入式开发之前，我简单地认为嵌入式开发因语言而已，分为用 C&#x2F;Cpp 开发（Arduino）和用 Python 开发（MicroPython）。</p>\n<p>直到我遇见了 ESP-IDF 这个东西。</p>\n<p>啥啊，为啥这家伙用的也是 C，代码我还一点都看不懂。</p>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><p>嵌入式开发选用的语言和语法因选择的框架而异。</p>\n<p>ESP-EDF 更靠近底层，因而编写更复杂；Arduino 对底层进行封装，更靠上层且对用户更友好；MicroPython 则是在开发板上还原了一个 Python 的开发环境，继承了 Python 的诸多优点（简单的语法、无需编译就能执行新代码等）。</p>\n<p>此外，还能用 JS、Java、Lua 等等语言进行开发。</p>\n<h3 id=\"我的选择\"><a href=\"#我的选择\" class=\"headerlink\" title=\"我的选择\"></a>我的选择</h3><p>我手上有两块板子，一块被我刷成了 MicroPython，但目前不打算去用它。</p>\n<p>我打算用 Arduino + C 进行开发。</p>\n<h3 id=\"配置-VSCode-Arduino-开发环境\"><a href=\"#配置-VSCode-Arduino-开发环境\" class=\"headerlink\" title=\"配置 VSCode + Arduino 开发环境\"></a>配置 VSCode + Arduino 开发环境</h3><p>Arduino 没有代码补全，太难用。简述一下如何使用 VSCode 进行开发：</p>\n<ul>\n<li>VSC 安装 Arduino 插件；</li>\n<li>在 首选项-设置 中配置 Arduino 的路径 <code>Arduino.path</code></li>\n<li>打开项目后选择 MCU 类型和串口</li>\n</ul>\n<p>就能用啦。</p>\n<h2 id=\"第一个项目\"><a href=\"#第一个项目\" class=\"headerlink\" title=\"第一个项目\"></a>第一个项目</h2><p>第一个项目就不选输出 Hello World 了，一点硬件的感觉都没有。</p>\n<p>据<a href=\"https://wiki.luatos.com/chips/esp32c3/board.html\"> 官方文档 </a>，主板板载的两个 LED 灯对应的 GPIO 为 <code>IO12 IO13</code>，高电平有效。</p>\n<p>就此编写一个<del>无稳态多协振荡电路</del>让 LED 灯交替闪烁的程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">setup</span><span class=\"hljs-params\">()</span>                 <span class=\"hljs-comment\">//初始化函数，只会在开发板上电或复位时被调用一次</span><br>&#123; <br>  pinMode(<span class=\"hljs-number\">12</span>, OUTPUT);       <span class=\"hljs-comment\">//初始化 IO12 为输出口</span><br>  pinMode(<span class=\"hljs-number\">13</span>, OUTPUT);       <span class=\"hljs-comment\">//初始化 IO13 为输出口</span><br>  digitalWrite(<span class=\"hljs-number\">12</span>, LOW);     <span class=\"hljs-comment\">//初始化设为低电平，则灯灭</span><br>  digitalWrite(<span class=\"hljs-number\">13</span>, LOW);     <span class=\"hljs-comment\">//初始化设为低电平，则灯灭</span><br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">loop</span><span class=\"hljs-params\">()</span>                  <span class=\"hljs-comment\">//上电之后一直循环执行的函数</span><br>&#123; digitalWrite(<span class=\"hljs-number\">12</span>, HIGH);    <span class=\"hljs-comment\">//亮左灯</span><br>  digitalWrite(<span class=\"hljs-number\">13</span>, LOW);     <span class=\"hljs-comment\">//关右灯</span><br>  delay(<span class=\"hljs-number\">1000</span>);               <span class=\"hljs-comment\">//等待1秒</span><br>  digitalWrite(<span class=\"hljs-number\">12</span>, LOW);     <span class=\"hljs-comment\">//关左灯</span><br>  digitalWrite(<span class=\"hljs-number\">13</span>, HIGH);    <span class=\"hljs-comment\">//亮右灯</span><br>  delay(<span class=\"hljs-number\">1000</span>);               <span class=\"hljs-comment\">//等待1秒</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>编译+上传即可。</p>\n<p>结果就不展示了，两个灯在交替闪烁。</p>\n",
            "tags": [
                "教程",
                "嵌入式开发"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/d01399e6.html",
            "url": "https://blog.udon.eu.org/archives/d01399e6.html",
            "title": "Code-Server 的代理配置",
            "date_published": "2022-03-19T14:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>一年前，我介绍了如何在群晖上使用 Docker 部署 Code-Server，在外也能轻松使用已经配置好的开发环境。<a href=\"https://blog.udon.eu.org/archives/375e7789.html\">群晖搭建 VSCode 服务器与 Syncthing 服务</a></p>\n<p>最近我换了 iPad，琢磨如何发挥她的生产力。除了使用网页版的 IDE（Codepen、Gitpod等），就是自建网页版的 VSCode 了。下面简要介绍一下我是如何给 Code-Server Docker 配置代理，使其成为一个完备的开发平台。</p>\n<span id=\"more\"></span>\n\n<p>将 Code-Server 部署在国内服务器（例如我家里的 NAS），可以获得稳定的连接，这对于开发平台是尤其重要的，VSCode 遇到连接不顺畅就会要求你刷新界面，很可能会丢失数据。</p>\n<p>但由于众所周知的原因，在国内的网络环境做开发可以说是寸步难行，我便采用 Clash Docker 来给 Code-Server 加上代理。</p>\n<h3 id=\"Clash-Docker-安装\"><a href=\"#Clash-Docker-安装\" class=\"headerlink\" title=\"Clash Docker 安装\"></a>Clash Docker 安装</h3><p>Clash Core 普通版 Image：<a href=\"https://hub.docker.com/r/dreamacro/clash\">dreamacro&#x2F;clash - Docker Image | Docker Hub</a></p>\n<p>Clash Core Premium Image：<a href=\"https://hub.docker.com/r/dreamacro/clash-premium\">dreamacro&#x2F;clash-premium - Docker Image | Docker Hub</a></p>\n<p>Clash Core Premium 二进制文件： <a href=\"https://github.com/Dreamacro/clash/releases/tag/premium\">Premium release (github.com)</a></p>\n<p>Clash Core 有普通版和 Premium 版之分，目前我能体验到的二者的区别是普通版的 Clash Core 不支持 RULE-SET 功能。</p>\n<p>我常用的配置文件大量使用了 RULE-SET，所以我必须得用 Clash Core Premium。</p>\n<p>但 Pre Build 的 Image 似乎不支持 X86-64 v3 之下的 CPU（例如我的 J1900），所以我采取了部署普通版 Image，然后 attach 进 Docker 手动更换 Premium 内核的曲线救国方法。（更换 <code>/</code> 根目录下名为 <code>Clash</code>的二进制文件）</p>\n<p>部署 Docker 时注意一下几点：</p>\n<ul>\n<li>开放 7890（或你定义的代理端口）和 9090（Clash Core 管理面板）端口。</li>\n<li>将 <code>/root/.config/clash</code> 文件夹挂载到本地，存放 <code>config.yaml</code> 及其他配置文件。</li>\n</ul>\n<p>请勿将 Clash Core 的管理面板暴露到公网。我选择用 Tailscale 建立 VPN 访问家中的服务器进行配置。</p>\n<h3 id=\"Code-Server-的配置\"><a href=\"#Code-Server-的配置\" class=\"headerlink\" title=\"Code-Server 的配置\"></a>Code-Server 的配置</h3><p>需要在 Code-Server Docker 里添加两个环境变量，实现开机自动连接代理：</p>\n<ul>\n<li><code>http_proxy=http://clash_docker_ip:7890</code></li>\n<li><code>https_proxy=http://clash_docker_ip:7890</code></li>\n</ul>\n<p>可以使用同样的方法给其他 Docker 添加代理。</p>\n<hr>\n<p>在一顿折腾之后，Code-Server 终于可以顺畅访问 Github 等网站了。</p>\n<p>可喜可贺，可喜可贺。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/7263a385.html",
            "url": "https://blog.udon.eu.org/archives/7263a385.html",
            "title": "Klipper 的外网访问",
            "date_published": "2022-02-12T06:50:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>网络上有关 Klipper 的中文教程少之又少，固作此教程介绍一下如何在外网优雅地访问家中装有 Klipper 的 3D 打印机。</p>\n<h2 id=\"方法一：端口转发\"><a href=\"#方法一：端口转发\" class=\"headerlink\" title=\"方法一：端口转发\"></a>方法一：端口转发</h2><p><strong>此方法仅适用于拥有公网 IP 的用户</strong></p>\n<p>首先，使用 DDNS 将家庭宽带动态变化的 IP 绑定至域名，教程如下：</p>\n<ul>\n<li><a href=\"https://blog..eu.org/archives/87bacf3f.html\">群晖-外网访问一站式教程2 DDNS</a></li>\n<li><a href=\"https://blog..eu.org/archives/27f2d840.html\">iPv6下绝佳的DDNS方法-dynv6</a></li>\n</ul>\n<p>在配置端口映射之前，先介绍一下 Klipper 的网络结构：</p>\n<pre><code class=\" mermaid\">graph LR;\n\tA(&quot;你的设备&quot;) &lt;--80--&gt;\n\tB(&quot;前端网页（Fluidd/Mainsail/Octoprint）&quot;) &lt;--7125--&gt;\n\tC(&quot;API 服务器 Moonraker&quot;) \t&lt;--&gt;\n\tD(&quot;你的 3D 打印机&quot;);\n</code></pre>\n\n<p>线上的数字便是通讯的端口。</p>\n<p>由上图，我们不难看出，若需要在外网访问家中的 Klipper，就需要映射 <strong>80</strong> 和 <strong>7125</strong> 两个端口。</p>\n<p>于路由器的 <strong>端口转发&#x2F;端口映射</strong> 界面配置 80 和 7125 的转发即可。家庭宽带的公网 IP 不会开放 80 端口，可将外网端口配置为 8080，对应的内网端口为 80 即可。</p>\n<p>接着，在 Moonraker 配置 <code>moonraker.conf</code> <code>[authorization]</code> 模块的 <code>cors_domains</code> 模块中添加你的域名，格式为 <code>*://你们域名</code></p>\n<p>也可以选择不使用自己搭建的前端网页，而使用 <a href=\"http://app.fluidd.xyz/\">Fluidd</a> 或者 <a href=\"%5BMainsail%5D(http://my.mainsail.xyz/)\">Mainsail</a> 作者搭建的前端网页。在 Moonraker 配置 <code>moonraker.conf</code> <code>[authorization]</code> 模块的 <code>cors_domains</code> 模块中添加 <code>*://my.mainsail.xyz 与 *://app.fluidd.xyz</code></p>\n<h2 id=\"方法二：内网穿透\"><a href=\"#方法二：内网穿透\" class=\"headerlink\" title=\"方法二：内网穿透\"></a>方法二：内网穿透</h2><p><strong>本人不推荐使用这个方法，固仅简述一下</strong></p>\n<p>可以使用花生壳等内网穿透服务，但给的带宽太小，只能使用控制界面，不能使用摄像头。</p>\n<p>也可以选择自建内网穿透，例如 Frp, Ngrok 等服务。但最近越来越多 Frp 服务器遭到攻击，固不建议自建。</p>\n<h2 id=\"方法三：使用-VPN\"><a href=\"#方法三：使用-VPN\" class=\"headerlink\" title=\"方法三：使用 VPN\"></a>方法三：使用 VPN</h2><p>这是本人推荐的方法。</p>\n<p>与 Octoprint + Marlin 仅需要映射 80 端口不同，Klipper 还需要映射 Moonraker 的 7125 端口，配置端口转发与实际使用都不如前者来的方便。</p>\n<p>我个人推荐用诸如 Zerotier, Tailscale 一类的 VPN 软件，搭建自己的小内网，通过内网 IP 直接访问 Klipper，既安全又方便。</p>\n<p>Zerotier 或者 Tailscale 的使用技巧网上一大片，我就不赘述了。</p>\n",
            "tags": [
                "教程",
                "3D 打印"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/375e7789.html",
            "url": "https://blog.udon.eu.org/archives/375e7789.html",
            "title": "群晖搭建 VSCode 服务器与 Syncthing 服务",
            "date_published": "2021-03-19T16:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>这次我尝试在群晖上搭建 VSCode 服务器与 Syncthing 服务，实现电脑与 NAS 间的代码同步与网页中的 Coding。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h2 id=\"VSCode-网页版的实现\"><a href=\"#VSCode-网页版的实现\" class=\"headerlink\" title=\"VSCode 网页版的实现\"></a>VSCode 网页版的实现</h2><h3 id=\"偶遇服务器软件\"><a href=\"#偶遇服务器软件\" class=\"headerlink\" title=\"偶遇服务器软件\"></a>偶遇服务器软件</h3><p>刷 RSS 时我看到 V2EX 上一个帖子分享了一个实用工具：<a href=\"%22https://github.com/conwnet/github1s%22\">github+1s</a></p>\n<p>这个项目可以实现在 <strong>网页版 VSCode</strong> 中打开 GitHhub 上的代码。</p>\n<p>这个项目使用的 <a href=\"%22https://github.com/cdr/code-server%22\">code-server</a> 引起了我的兴趣。</p>\n<h3 id=\"code-server-的部署\"><a href=\"#code-server-的部署\" class=\"headerlink\" title=\"code-server 的部署\"></a>code-server 的部署</h3><p>群晖自带的 Docker 套件简化了部署的过程。</p>\n<p>在注册表中搜索 <a href=\"https://registry.hub.docker.com/r/codercom/code-server/\">code-server</a> 下载 image；</p>\n<p>打开 image 进行配置：</p>\n<ul>\n<li>使用高权限执行容器</li>\n<li>在 <code>高级设置-环境</code> 页面中添加环境变量 <code>PASSWORD</code>，值设定为你的登陆密码（由于在 Docker 页面中以明文保存，请注意密码安全）。</li>\n</ul>\n<p>启动容器，并使用 Docker 内置的 <code>终端机</code> 打开一个新的 <code>bash</code>。换源、更新 apt 、安装常用软件我就不再赘述。</p>\n<h3 id=\"code-server-的外网访问\"><a href=\"#code-server-的外网访问\" class=\"headerlink\" title=\"code-server 的外网访问\"></a>code-server 的外网访问</h3><p>code-server 没有自带 HTTPS 相关的配置，需要使用网站服务器进行反向代理。</p>\n<p>目前比较流行的有 Caddy 和 NGINX 两款。</p>\n<p>鉴于 Caddy 配置简单且 HTTPS 优先，我这次使用 Caddy。</p>\n<p><a href=\"https://caddyserver.com/docs/install#debian-ubuntu-raspbian\">Caddy 官方安装文档</a></p>\n<p>或使用一键安装脚本</p>\n<p><code>curl https://getcaddy.com | bash -s personal</code></p>\n<p>如果有开放的 443 端口，则可使用 Caddy 的自动 HTTPS 功能进行快速配置。</p>\n<p>若像我一样在家中的 NAS 上配置 code-server，则需要自己申请 tls 证书 (如 Let&#96;s Encrypt)，并按照 <a href=\"https://dengxiaolong.com/caddy/zh/tls.html\">Caddy-tls</a> 配置。</p>\n<p>反向代理配置可参考 <a href=\"https://github.com/cdr/code-server/blob/main/docs/guide.md#lets-encrypt\">code-server 官方的反代配置教程</a>。</p>\n<h3 id=\"一些疑难杂症\"><a href=\"#一些疑难杂症\" class=\"headerlink\" title=\"一些疑难杂症\"></a>一些疑难杂症</h3><h4 id=\"一些插件无法安装\"><a href=\"#一些插件无法安装\" class=\"headerlink\" title=\"一些插件无法安装\"></a>一些插件无法安装</h4><p>目前 code-server 的 VSCode 版本为 1.51.1， VSCode 官方则为 1.54.3 ，因此某些较新的插件可能无法使用。</p>\n<p>可以前往 <a href=\"https://marketplace.visualstudio.com/\">VS插件市场</a> 下载旧版插件并手动安装。</p>\n<h4 id=\"Docker-内挂载的目录无写权限\"><a href=\"#Docker-内挂载的目录无写权限\" class=\"headerlink\" title=\"Docker 内挂载的目录无写权限\"></a>Docker 内挂载的目录无写权限</h4><p>使用 <code>sudo chmod 777 ./</code> 给 coder 用户赋予读写权力。</p>\n<h4 id=\"Docker-内-Caddy-无法自启\"><a href=\"#Docker-内-Caddy-无法自启\" class=\"headerlink\" title=\"Docker 内 Caddy 无法自启\"></a>Docker 内 Caddy 无法自启</h4><p>这个我也还没有解决。暂且手动启动。</p>\n<h4 id=\"code-server-的各种性能问题\"><a href=\"#code-server-的各种性能问题\" class=\"headerlink\" title=\"code-server 的各种性能问题\"></a>code-server 的各种性能问题</h4><p>等待更多的更新吧，我接下来会尝试在 Docker 里编译原版 VSCode 并开启 Web 模式，对比二者性能。</p>\n<h2 id=\"Syncthing-服务搭建\"><a href=\"#Syncthing-服务搭建\" class=\"headerlink\" title=\"Syncthing 服务搭建\"></a>Syncthing 服务搭建</h2><p><a href=\"https://syncthing.net/\">Syncthing 官网</a> 已经给出了十分详尽的安装教程，也有群晖的安装包，我就不再赘述安装过程。</p>\n<p>Syncthing 的管理页面端口为 <code>8384</code>，若想在外网访问请使用 HTTPS。可以使用群晖内置的反向代理服务器进行反代。</p>\n<p>要注意把 <code>22000</code> 端口的 <code>TCP</code> 与 <code>UDP</code> 全部开放，才可在外网顺利与 NAS 同步。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/a455b52c.html",
            "url": "https://blog.udon.eu.org/archives/a455b52c.html",
            "title": "逃离国产软件 - 虚拟机计划",
            "date_published": "2020-08-07T04:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>使用 Hyper-V 运行 Windows LTSC 虚拟机，以隔离流氓的国产软件们。</p>\n<h3 id=\"为何大费周章？\"><a href=\"#为何大费周章？\" class=\"headerlink\" title=\"为何大费周章？\"></a>为何大费周章？</h3><p>我试过网络上的不少方法来隔离鹅厂的软件 —— 刚开源的 Sandboxie 也好，利用 Windows ACL 机制通过低权账户加以限制也好 —— 都因为权限问题失败了。最后决定用虚拟环境直接隔离这些软件。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"为什么是-Hyper-V-和-LTSC？\"><a href=\"#为什么是-Hyper-V-和-LTSC？\" class=\"headerlink\" title=\"为什么是 Hyper-V 和 LTSC？\"></a>为什么是 Hyper-V 和 LTSC？</h3><p>我用过 VMWare，觉得还是 Windows 原生的 Hyper-V 启动最快。还不用钱。</p>\n<p>Windows LTSC 是企业定制版，官方精简了系统，性能开销更少。</p>\n<h3 id=\"事前准备\"><a href=\"#事前准备\" class=\"headerlink\" title=\"事前准备\"></a>事前准备</h3><p>拥有 16G 以上内存及 NVME 高速硬盘的用户可以放心采用该方案，虚拟机运行时不会影响其他软件的流畅运行。</p>\n<h4 id=\"下载-MSDN-上的-Windows-LTSC\"><a href=\"#下载-MSDN-上的-Windows-LTSC\" class=\"headerlink\" title=\"下载 MSDN 上的 Windows LTSC:\"></a>下载 <a href=\"https://msdn.itellyou.cn/\">MSDN</a> 上的 Windows LTSC:</h4><p>侧边栏选择 <strong>操作系统</strong> ；选择 <strong>Windows 10 Enterprise LTSC 2019</strong>。</p>\n<h4 id=\"安装-Hyper-V：\"><a href=\"#安装-Hyper-V：\" class=\"headerlink\" title=\"安装 Hyper-V：\"></a>安装 Hyper-V：</h4><p>对于 Windows 专业版 用户，在 控制面板 - 程序与功能 - 启动或关闭Windows功能 中找到 <strong>Hyper-V</strong> 并打开。</p>\n<p>对于 其他版本 Windows 的用户，则稍微有些麻烦：</p>\n<ol>\n<li>在记事本中输入如下代码</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">pushd</span> <span class=\"hljs-string\">&quot;%~dp0&quot;</span><br><br><span class=\"hljs-built_in\">dir</span> /b %SystemRoot%\\servicing\\Packages\\*Hyper-V*.mum &gt;hyper-v.txt<br><br><span class=\"hljs-keyword\">for</span> /f %%i <span class=\"hljs-keyword\">in</span> (<span class=\"hljs-string\">&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;</span>) <span class=\"hljs-keyword\">do</span> dism /online /norestart /add-package:<span class=\"hljs-string\">&quot;%SystemRoot%\\servicing\\Packages\\%%i&quot;</span><br><br>del hyper-v.txt<br><br>Dism /online /enable-feature /featurename:Microsoft-Hyper-V-All /LimitAccess /ALL<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>把文件保存为Hyper-V.cmd</li>\n<li>右键该文件，选择 <strong>以管理员身份运行</strong></li>\n</ol>\n<p>根据提示完成安装。</p>\n<blockquote>\n<p>摘自知乎 <a href=\"https://zhuanlan.zhihu.com/p/51939654\">没人不认识我</a> 的回答</p>\n</blockquote>\n<h3 id=\"安装虚拟机\"><a href=\"#安装虚拟机\" class=\"headerlink\" title=\"安装虚拟机\"></a>安装虚拟机</h3><p>打开 Hyper-V ，选择 <strong>新建 - 虚拟机</strong> ；</p>\n<p>根据向导提示设置虚拟机，选择 <strong>第一代虚拟机</strong> ；</p>\n<p>内存分配我选了 2G （共16G）；CPU 分配我选了 4线程 （共12线程）【需要完成配置后在 <strong>设置</strong> 中更改】；</p>\n<p>其余设置默认或自定；</p>\n<p>安装选项选择 <strong>从 CD&#x2F;DVD-ROM 安装操作系统</strong> ，选择刚刚下载好的 Windows LTSC ISO镜像；</p>\n<p>完成配置后，启动虚拟机，安装 Windows LTSC 到硬盘。</p>\n<h3 id=\"配置环境\"><a href=\"#配置环境\" class=\"headerlink\" title=\"配置环境\"></a>配置环境</h3><p>装好系统后要干什么不用我说了吧。</p>\n<p>把垃圾们倒进去就好啦。</p>\n<p>实测空载消耗 CPU 算力在 0%-3% 浮动；内存占用 2.2G，实际使用 1.2G 。</p>\n",
            "tags": [
                "教程",
                "软件"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/6b40e5ad.html",
            "url": "https://blog.udon.eu.org/archives/6b40e5ad.html",
            "title": "提升音乐体验-本地音乐标签/歌词匹配与回放增益",
            "date_published": "2020-05-05T05:40:06.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>推荐两款能让听歌体验变得更好的软件 —— Music Tag &#x2F; Foobar2000 。</p>\n<p>附带使用教程。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"音乐标签-Music-Tag\"><a href=\"#音乐标签-Music-Tag\" class=\"headerlink\" title=\"音乐标签 Music Tag\"></a>音乐标签 Music Tag</h2><h3 id=\"官方网站-下载地址\"><a href=\"#官方网站-下载地址\" class=\"headerlink\" title=\"官方网站&#x2F;下载地址\"></a>官方网站&#x2F;下载地址</h3><p><a href=\"https://www.cnblogs.com/vinlxc/p/11347744.html\">https://www.cnblogs.com/vinlxc/p/11347744.html</a></p>\n<h3 id=\"软件特点\"><a href=\"#软件特点\" class=\"headerlink\" title=\"软件特点\"></a>软件特点</h3><p>古人云，专辑封面是一首歌的灵魂。（我乱说的）</p>\n<p>Music Tag 是一款可以自动匹配本地音乐的标签与歌词的软件。</p>\n<p>一键从多家音乐网站拉取元数据&#x2F;封面图&#x2F;歌词，不能再爽了。</p>\n<h3 id=\"使用教程-建议\"><a href=\"#使用教程-建议\" class=\"headerlink\" title=\"使用教程&#x2F;建议\"></a>使用教程&#x2F;建议</h3><p>导入一批歌曲后，选择 自动匹配标签 ：（如下图）</p>\n<p><img src=\"/images/2020-05-05/music-tag-1.png\"></p>\n<p>然后按下图配置，在原有元数据下添加更多信息：</p>\n<p><img src=\"/images/2020-05-05/music-tag-2.png\"></p>\n<p>在第一轮匹配后，建议再进行第二轮封面图片匹配，并覆盖原图片，配置如下图：</p>\n<p><img src=\"/images/2020-05-05/music-tag-3.png\"></p>\n<p>接着，就需要你耐心地查看每首歌的元数据（善用方向键），检查是否有匹配错误的歌曲，并在 标签源-组合标签 处手动搜索，选择正确的元数据，如下图所示：</p>\n<p><img src=\"/images/2020-05-05/music-tag-4.png\"></p>\n<p>建议检查一下歌曲的歌词，特别是较小众的歌曲。Music Tag 的歌词搜索错误率较高。</p>\n<p>如下图所示，选择并查看歌词，若有误可以手动搜索：</p>\n<p><img src=\"/images/2020-05-05/music-tag-5.png\"></p>\n<p><img src=\"/images/2020-05-05/music-tag-6.png\"></p>\n<p>最后选择导出 LRC 歌词：</p>\n<p><img src=\"/images/2020-05-05/music-tag-7.png\"></p>\n<p>所有歌曲的 元数据-封面图-歌词 就此已匹配完毕。</p>\n<p>最终效果如下：</p>\n<p><img src=\"/images/2020-05-05/foobar2000-m.jpg\"></p>\n<h2 id=\"Foobar2000\"><a href=\"#Foobar2000\" class=\"headerlink\" title=\"Foobar2000\"></a>Foobar2000</h2><h3 id=\"官方网站\"><a href=\"#官方网站\" class=\"headerlink\" title=\"官方网站\"></a>官方网站</h3><p><a href=\"http://www.foobar2000.org/\">http://www.foobar2000.org/</a></p>\n<h3 id=\"回放增益介绍\"><a href=\"#回放增益介绍\" class=\"headerlink\" title=\"回放增益介绍\"></a>回放增益介绍</h3><p><a href=\"https://zh.wikipedia.org/wiki/%E5%9B%9E%E6%94%BE%E5%A2%9E%E7%9B%8A\">维基百科-回放增益</a></p>\n<p>回放增益可以使音量大小各不相同的音乐向统一标准靠齐。</p>\n<p>将所有音乐扫描并打上回放增益 tag 后，再也不用担心下一首歌震破耳膜了。</p>\n<h3 id=\"使用教程\"><a href=\"#使用教程\" class=\"headerlink\" title=\"使用教程\"></a>使用教程</h3><p>导入并全选歌曲，右键，选择 ReplayGain ：</p>\n<p><img src=\"/images/2020-05-05/foobar2000-1.png\"></p>\n<p>下列三种扫描方式均可。个人喜欢将全部歌曲的音量统一，故选择第一种：</p>\n<p><img src=\"/images/2020-05-05/foobar2000-2.png\"></p>\n<p>待扫描结束后，点击 Update File Tags ，将回放增益数据写入文件 Tag ：</p>\n<p><img src=\"/images/2020-05-05/foobar2000-3.png\"></p>\n<p>回放增益扫描完毕。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>我是一周不往曲库里添加新曲就受不了的类型。</p>\n<p>这几天往曲库里添加曲子的时候查阅了这些能提升音乐体验的方法，希望能帮到你。</p>\n",
            "tags": [
                "教程",
                "软件"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/e3c95af8.html",
            "url": "https://blog.udon.eu.org/archives/e3c95af8.html",
            "title": "BGP初体验-Linux,Openwrt与Quagga",
            "date_published": "2020-02-10T04:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>好久没写博客了！今天抽出点时间分享一下我的 BGP 初体验。</p>\n<p>这一切的一切都要从一个叫鹤伞 Ria 的 Vtuber 说起……</p>\n<span id=\"more\"></span>\n\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h3 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h3><p>Debian 系 Linux（其实是 Kali）：</p>\n<p><code>sudo apt update &amp; sudo apt install quagga</code></p>\n<p>Openwrt:</p>\n<p><code>opkg update &amp; opkg install quagga quagga-zebra quagga-bgpd quagga-vtysh</code></p>\n<h3 id=\"网络配置\"><a href=\"#网络配置\" class=\"headerlink\" title=\"网络配置\"></a>网络配置</h3><p>采用 Zerotier 建立内网环境模拟真实网络。</p>\n<p>Zerotier 的安装及配置不再赘述，官网有详尽教程。</p>\n<h2 id=\"网络环境\"><a href=\"#网络环境\" class=\"headerlink\" title=\"网络环境\"></a>网络环境</h2><p>本来想做三台设备两个 AS 间的通讯，有一台设备无法安装任何 BGP 软件也就作罢；也没有画拓扑图的必要了（悲）。</p>\n<p>AS114514 Debian 10.0.1.1，命名为 R1，享有 10.0.1.0&#x2F;24 网段；</p>\n<p>AS1919810 Openwrt 10.0.2.1，命名为 R2，享有 10.0.2.0&#x2F;24 网段。</p>\n<h2 id=\"Quagga配置\"><a href=\"#Quagga配置\" class=\"headerlink\" title=\"Quagga配置\"></a>Quagga配置</h2><p>下面才是重头戏。Quagga 的配置文件位于 <code>/etc/quagga/</code></p>\n<p>据测试，Openwrt 安装 quagga 后会带有初始配置，而 Debian 不带初始配置，可自行创建。</p>\n<p><code>/etc/quagga/zebra.conf</code> 配置（可不用修改）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">! 登陆密码<br><span class=\"hljs-keyword\">password</span> zebra<br>!<br><span class=\"hljs-keyword\">access</span>-list vty permit <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>/<span class=\"hljs-number\">8</span><br><span class=\"hljs-keyword\">access</span>-list vty deny <span class=\"hljs-keyword\">any</span><br>!<br><span class=\"hljs-type\">line</span> vty<br> <span class=\"hljs-keyword\">access</span>-<span class=\"hljs-keyword\">class</span> vty<br></code></pre></td></tr></table></figure>\n\n<p><code>/etc/quagga/bgpd.conf</code> 配置（需要根据情境修改）</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs diff\"><span class=\"hljs-addition\">! 密码</span><br>password zebra<br><span class=\"hljs-addition\">! AS号</span><br>router bgp 114514<br><span class=\"hljs-addition\">! 本机公网（VPN网络）ip</span><br> bgp router-id 10.0.1.1<br><span class=\"hljs-addition\">! 本路由享有网段（需要交换的网段）</span><br> network 10.0.1.0/24<br><span class=\"hljs-addition\">! peer信息（建立连接的机器的公网（VPN网络）ip，AS及称呼）</span><br> neighbor 10.0.2.1 remote-as 1919810<br> neighbor 10.0.2.1 description R2<br></code></pre></td></tr></table></figure>\n\n<p> 另一台机器的配置只需依葫芦画瓢，我就不再赘述。</p>\n<p>配置之后，运行</p>\n<p><code>/etc/init.d/zebra restart</code></p>\n<p><code>/etc/init.d/bgpd restart</code>（Debian）</p>\n<p>或者</p>\n<p><code>/etc/init.d/quagga restart</code>（Openwrt）</p>\n<p>重启 quagga 服务。</p>\n<h2 id=\"欣赏结果\"><a href=\"#欣赏结果\" class=\"headerlink\" title=\"欣赏结果\"></a>欣赏结果</h2><p>忙活了这么久，终于能看到结果了！</p>\n<p>运行</p>\n<p><code>vtysh</code></p>\n<p>进入 quagga 控制台（指令模拟 Cisco，这块不大了解）</p>\n<p>输入</p>\n<p><code>show ip bgp neighbor</code></p>\n<p>就会看到</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">BGP neighbor <span class=\"hljs-keyword\">is</span> <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.2</span><span class=\"hljs-number\">.1</span>, remote <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-number\">1919810</span>, <span class=\"hljs-keyword\">local</span> <span class=\"hljs-keyword\">AS</span> <span class=\"hljs-number\">114514</span>, <span class=\"hljs-keyword\">external</span> link<br>Description: R2<br>BGP <span class=\"hljs-keyword\">version</span> <span class=\"hljs-number\">4</span>, remote router ID <span class=\"hljs-number\">10.0</span><span class=\"hljs-number\">.2</span><span class=\"hljs-number\">.1</span><br></code></pre></td></tr></table></figure>\n\n<p>还有这么一张表</p>\n<pre><code class=\"hljs\">                     Sent       Rcvd\nOpens:                  2          0\nNotifications:          0          0\nUpdates:                2          2\nKeepalives:          1050       1049\nRoute Refresh:          0          0\nCapability:             0          0\nTotal:               1054       1051\n</code></pre>\n<p>再看看路由器内的活动ipv4路由表</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">网络</th>\n<th align=\"center\">对象</th>\n<th align=\"center\">IPv4 网关</th>\n<th align=\"center\">跃点数</th>\n<th align=\"center\">表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">xxx</td>\n<td align=\"center\">10.0.2.0&#x2F;24</td>\n<td align=\"center\">10.0.2.1</td>\n<td align=\"center\">20</td>\n<td align=\"center\">main</td>\n</tr>\n</tbody></table>\n<p>就算大功告成了！</p>\n<h2 id=\"有什么用处呢？\"><a href=\"#有什么用处呢？\" class=\"headerlink\" title=\"有什么用处呢？\"></a>有什么用处呢？</h2><p><strong>没有。</strong></p>\n<p>内网测试唯一能享受的就是看着这条无形的链接，想象自己也是网络工程师。</p>\n<p>但是还是感觉很爽！</p>\n<p>而且你已经学会（大概）了 BGP，获取全球路由表也能办到了！</p>\n<p>参考 Ria 的爸爸<del>（我的岳父）</del>的文章</p>\n<p><a href=\"https://blog.foxsar.black/?p=246\">使用bird配置bgp网络互连</a></p>\n<p>至于这一切与 Ria 有啥关系？欢迎关注 Ria 了解详情（滑稽）</p>\n<p><a href=\"https://t.me/kanaria_group\">Telegram群组</a>  <a href=\"https://space.bilibili.com/2450927\">bilibli</a>  <a href=\"https://www.youtube.com/channel/UCC12ijOcPxnRSQPLvjWYXUg\">Youtube</a></p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/9d1c6fa4.html",
            "url": "https://blog.udon.eu.org/archives/9d1c6fa4.html",
            "title": "Joplin+Webdav同步问题的解决方案",
            "date_published": "2020-01-06T10:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2 id=\"问题内容\"><a href=\"#问题内容\" class=\"headerlink\" title=\"问题内容\"></a>问题内容</h2><p>在群晖上搭建了 Webdav 服务器，使用 Joplin 连接后无法同步笔记。</p>\n<span id=\"more\"></span> \n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><h3 id=\"错误示范：\"><a href=\"#错误示范：\" class=\"headerlink\" title=\"错误示范：\"></a>错误示范：</h3><p>‘ <a href=\"https://your.domain.com:[your\">https://your.domain.com:[your</a> port] ‘</p>\n<p>以此路径访问的是群晖文件系统的 <code>/ </code> 目录，由于没有权限读写，同步失败。</p>\n<h3 id=\"正确示范：\"><a href=\"#正确示范：\" class=\"headerlink\" title=\"正确示范：\"></a>正确示范：</h3><p>在群晖控制面板内新建一个名为 <code>Joplin</code> 的共享文件夹。以域名：</p>\n<p>‘ <a href=\"https://your.domain.com:[your\">https://your.domain.com:[your</a> port] &#x2F;Joplin’</p>\n<p>访问即可同步。</p>\n<h3 id=\"自定义配置：\"><a href=\"#自定义配置：\" class=\"headerlink\" title=\"自定义配置：\"></a>自定义配置：</h3><p>若想在已经存在的文件夹下同步 Joplin 笔记，按照正确示范所书写的 URL 书写路径即可在想要的地方同步。</p>\n<h2 id=\"解决方案的探索\"><a href=\"#解决方案的探索\" class=\"headerlink\" title=\"解决方案的探索\"></a>解决方案的探索</h2><p>（我并未了解过 Webdav 的原理）<br>遇到此问题时，我在上 Google 查找解决方法前试着自行分析。思考原因后我选择了抓包分析。</p>\n<p>结合抓包结果和 Joplin 同步日志可以看到 Joplin 在 <code>/ </code> 目录下查找了 <code>.lock</code> 等文件。结合其他 Webdav 软件可以看到访问的 URL 指向的是目标文件夹，即“域名：端口&#x2F;目标文件夹”，由此推测需要在配置内为 Joplin 指明同步目录，否则将在没有权限的根目录下同步，导致失败。</p>\n<p>这是一次没有什么技术含量但能启发我的尝试。若你也遇到了类似的问题，希望也能启发到你。</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/27f2d840.html",
            "url": "https://blog.udon.eu.org/archives/27f2d840.html",
            "title": "iPv6下绝佳的DDNS方法-dynv6",
            "date_published": "2019-10-03T15:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>下面我将介绍一种适用于 IPv6-DDNS 的绝佳方法！</p>\n<span id=\"more\"></span>\n\n<h3 id=\"通过-IPv6-访问的优点\"><a href=\"#通过-IPv6-访问的优点\" class=\"headerlink\" title=\"通过 IPv6 访问的优点\"></a>通过 IPv6 访问的优点</h3><p>没有端口限制！！！可以通过 80&#x2F;443 访问 web 服务器了！不用带着烦人的端口号！</p>\n<p>每台设备有独立的 IPv6，配置更加方便，无需路由器充当网关进行端口转发！</p>\n<h3 id=\"IPv6-也有不足之处\"><a href=\"#IPv6-也有不足之处\" class=\"headerlink\" title=\"IPv6 也有不足之处\"></a>IPv6 也有不足之处</h3><p>最严重的问题：很多家宽并没有开启 IPv6 的获取。但访问 IPv6 的设备必须要拥有 IPv6 地址！</p>\n<p>技术问题，难以解决。一般来说手机的移动网络都已分发 IPv6 地址。</p>\n<p>想要家宽拥有 IPv6？或许你需要修改光猫设置（超级管理），亦或是将光猫改为桥接模式，用路由器拨号从而获取 IPv6 地址。</p>\n<h3 id=\"如何实现iPv6-DDNS\"><a href=\"#如何实现iPv6-DDNS\" class=\"headerlink\" title=\"如何实现iPv6-DDNS\"></a>如何实现iPv6-DDNS</h3><ul>\n<li>在 <a href=\"https://dynv6.com/\">dynv6</a>注册一个账号</li>\n<li>在 <strong>Instructions</strong> 界面查看API与你的DDNS域名</li>\n<li>下载官方提供的 <a href=\"https://gist.github.com/corny/7a07f5ac901844bd20c9\">a nice script</a></li>\n</ul>\n<blockquote>\n<p>这点尤其重要！我在网络上寻寻觅觅无数脚本，总是失败。最后才发现官方有提供脚本也！一试马上就成功了。</p>\n</blockquote>\n<ul>\n<li>按照页面内提供的代码执行脚本</li>\n</ul>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stata\"><span class=\"hljs-keyword\">token</span>= *your <span class=\"hljs-keyword\">token</span>* ./dynv6.<span class=\"hljs-keyword\">sh</span> *your DDNS domain*<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>可以将其添加到 crontab 一类的软件内，规定时间自动执行脚本（每 10分钟一次为宜）</li>\n</ul>\n<p><strong>大功告成！</strong></p>\n<h3 id=\"事后\"><a href=\"#事后\" class=\"headerlink\" title=\"事后\"></a>事后</h3><ul>\n<li>你可以把自己的域名 CNAME 过去</li>\n<li>也可以用 dynv6 提供的域名</li>\n</ul>\n<p>随心所欲！</p>\n<p>Over.</p>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/a4c81e8f.html",
            "url": "https://blog.udon.eu.org/archives/a4c81e8f.html",
            "title": "搭建Calibre-Web电子书网页端管理服务",
            "date_published": "2019-10-02T10:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h4 id=\"说在前面\"><a href=\"#说在前面\" class=\"headerlink\" title=\"说在前面\"></a>说在前面</h4><p>Kindle 是一样阅读利器，但若是没有一个强大的书库，它也只能用来压泡面（笑）</p>\n<p>今天我们利用 Docker 在群晖（任意系统）上搭建 Calibre-web 服务</p>\n<span id=\"more\"></span>\n\n<h4 id=\"docker选择\"><a href=\"#docker选择\" class=\"headerlink\" title=\"docker选择\"></a>docker选择</h4><blockquote>\n<p><a href=\"https://hub.docker.com/r/technosoft2000/calibre-web/\">technosoft2000-calibre-web</a></p>\n</blockquote>\n<p>我在尝试了 3 款 Docker Image 后，决定使用这款。</p>\n<h4 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h4><h5 id=\"Calibre-web\"><a href=\"#Calibre-web\" class=\"headerlink\" title=\"Calibre-web\"></a>Calibre-web</h5><ul>\n<li><p>基于 Python，性能高（低）</p>\n</li>\n<li><p>与 Calibre 软件的数据库等文件完全互通</p>\n</li>\n<li><p>支持推送至 Kindle</p>\n</li>\n<li><p>支持在线转码书籍（虽然问题较多）</p>\n</li>\n</ul>\n<h5 id=\"technosoft2000-calibre-web\"><a href=\"#technosoft2000-calibre-web\" class=\"headerlink\" title=\"technosoft2000-calibre-web\"></a>technosoft2000-calibre-web</h5><ul>\n<li><p>比起其他 Image 版本更新更加稳定（稳定很多）</p>\n</li>\n<li><p>支持在线转码（其他 Image 不行）</p>\n</li>\n<li><p>版本较新</p>\n</li>\n</ul>\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>首先，将你的 Calibre 数据库的位置挂载到 Docker 内的 <strong>&#x2F;books</strong>。</p>\n<p>启动 Docker 后不要着急，等待 Docker 内软件安装完毕后，访问您设置的端口，访问 Calibre-Web。</p>\n<p>在 <strong>Calibre 数据库位置</strong> 一栏填写</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">/books<br></code></pre></td></tr></table></figure>\n\n<p><strong>特性配置</strong> 可以依情况而变，不一定要按我的配置。</p>\n<p>若想要使用在线转码功能，<strong>外部二进制</strong> 一栏中，选择 <strong>使用 calibre 的电子书转换器</strong> 。 <strong>转换工具路径</strong> 按图片中填写。</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\">/<span class=\"hljs-meta\">opt</span>/calibre/ebook-convert<br></code></pre></td></tr></table></figure>\n\n<p>点击 <strong>提交</strong> 即可完成安装。</p>\n<p><strong>注意</strong></p>\n<p>若提示无法读取数据库，尝试将数据库所处的文件夹的权限改为<strong>755</strong> 。</p>\n<p>如何操作？请打开 SSH，在 Terminal 内操作。</p>\n<p>若还是失败，尝试在本地 Calibre 软件新建一个书库，将<strong>空的</strong>数据库文件移动到你挂载的目录下。</p>\n<p><strong>安装界面示意图</strong></p>\n<p><img src=\"/images/2019-10-02/1.jpg\"></p>\n<h4 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h4><p>安装后的操作我就不多提了。该上传书籍的上传，该push的push。</p>\n<p>我的几个建议：</p>\n<ul>\n<li>推送邮箱推荐使用 Outlook，限制少。</li>\n<li>可以用 Calibre 软件管理数据库。不知道为什么，在本地做好更改后，网页版并没有任何变化。我试着备份又还原了数据库后，网页里再重新加载数据库才成功了。</li>\n<li>网页转码会遇到种种问题，例如电子书有加密。转码失败实属正常。</li>\n</ul>\n",
            "tags": [
                "教程"
            ]
        },
        {
            "id": "https://blog.udon.eu.org/archives/87bacf3f.html",
            "url": "https://blog.udon.eu.org/archives/87bacf3f.html",
            "title": "群晖-外网访问一站式教程2 DDNS",
            "date_published": "2019-08-31T10:30:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>简述配置 DDNS 的方法。</p>\n<h4 id=\"什么是DDNS\"><a href=\"#什么是DDNS\" class=\"headerlink\" title=\"什么是DDNS\"></a>什么是DDNS</h4><p><a href=\"https://zh.m.wikipedia.org/zh/%E5%8B%95%E6%85%8BDNS\">维基百科-动态DNS</a><br>鉴于 IPv4 地址的枯竭，运营商开始给家用宽带分配动态 IP 地址，即 IP 会随时间或重新拨号而改变。DDNS 可以允许用户通过API动态地将变化的 IP 地址传送给域名解析商，达到域名外网访问的效果。<br>由于带宽分配原因，家用宽带的上传带宽一般在 20-30Mbps 间，故外网访问速度并没有达到如签约的 100Mbps 属正常。</p>\n<h4 id=\"事先准备\"><a href=\"#事先准备\" class=\"headerlink\" title=\"事先准备\"></a>事先准备</h4><p>打电话给 ISP（运营商）的小姐姐，让她给你公网 IP，如果问起原因可以回答家里装监控。没有开启公网 IP 将无法从外网访问家庭的内部网络。<br>由于运营商（指大部分，如电信）封锁了 80（HTTP）和 443（HTTPS）端口，我们将使用其他的端口进行访问。挑选一些你喜欢的端口，预备使用（如 8080-8090，4431-4439等）。</p>\n<h4 id=\"选择支持DDNS的域名解析服务商\"><a href=\"#选择支持DDNS的域名解析服务商\" class=\"headerlink\" title=\"选择支持DDNS的域名解析服务商\"></a>选择支持DDNS的域名解析服务商</h4><h5 id=\"CloudFlare\"><a href=\"#CloudFlare\" class=\"headerlink\" title=\"CloudFlare\"></a>CloudFlare</h5><p>老牌的域名解析商，也是少有的免费提供 CDN 的服务商。<br>我推荐 CloudFlare 的原因有三点</p>\n<ol>\n<li>可以使用 CDN，保证网络质量始终处于较好状态。例如，我的 Blog 搭建在 Github 上，若有时因网络抽风无法访问 Github，CDN 能助你一臂之力。</li>\n<li>可以查看连接数，数据量，访客量等详细数据。</li>\n<li>API 获取方便。(2022 Update: CloudFlare 的 API 服务器接近半墙，国内很难再访问了，不推荐使用)</li>\n</ol>\n<h5 id=\"Dynv6\"><a href=\"#Dynv6\" class=\"headerlink\" title=\"Dynv6\"></a>Dynv6</h5><p>提供 IPv4 与 IPv6 DDNS 的服务商，在 21 年有一次较长时间的故障，平常都非常稳定。</p>\n<h5 id=\"DNSPod\"><a href=\"#DNSPod\" class=\"headerlink\" title=\"DNSPod\"></a>DNSPod</h5><p>被腾讯收购的 DNS 服务商，使用需实名。</p>\n<h4 id=\"配置-DDNS-服务\"><a href=\"#配置-DDNS-服务\" class=\"headerlink\" title=\"配置 DDNS 服务\"></a>配置 DDNS 服务</h4><p>家用路由器的 DDNS 功能一般仅支持国内大型服务商，例如花生壳。</p>\n<p>有两种方法可以配置自己的 DDNS 服务：</p>\n<ol>\n<li>将负责拨号的路由器刷成 Openwrt 系统，安装 DDNS 插件以配置自定义脚本的 DDNS 服务；</li>\n<li>在一台 24x7 运行的设备上，通过 API 获取 IP 地址，并定时执行脚本更新 IP 地址；</li>\n</ol>\n<p>前者虽然更加麻烦，但可以实现仅在 IP 更换时发起更新解析的请求，而不需要定期（如每十分钟）请求一次 API，减小账户被封的风险，并尽可能地缩短从 IP 更换到新的解析生效的时间。</p>\n<p>不管是路由器也好，Linux 上的脚本也好，可以在 GitHub 上寻找对应 DDNS 服务商的更新脚本，填上配置就能使用啦~</p>\n",
            "tags": [
                "教程"
            ]
        }
    ]
}